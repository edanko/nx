// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/predicate"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/remnant"
	"github.com/google/uuid"
)

// RemnantUpdate is the builder for updating Remnant entities.
type RemnantUpdate struct {
	config
	hooks    []Hook
	mutation *RemnantMutation
}

// Where appends a list predicates to the RemnantUpdate builder.
func (ru *RemnantUpdate) Where(ps ...predicate.Remnant) *RemnantUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RemnantUpdate) SetUpdatedAt(t time.Time) *RemnantUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetName sets the "name" field.
func (ru *RemnantUpdate) SetName(s string) *RemnantUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetQuality sets the "quality" field.
func (ru *RemnantUpdate) SetQuality(s string) *RemnantUpdate {
	ru.mutation.SetQuality(s)
	return ru
}

// SetType sets the "type" field.
func (ru *RemnantUpdate) SetType(s string) *RemnantUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetLength sets the "length" field.
func (ru *RemnantUpdate) SetLength(f float64) *RemnantUpdate {
	ru.mutation.ResetLength()
	ru.mutation.SetLength(f)
	return ru
}

// AddLength adds f to the "length" field.
func (ru *RemnantUpdate) AddLength(f float64) *RemnantUpdate {
	ru.mutation.AddLength(f)
	return ru
}

// SetWidth sets the "width" field.
func (ru *RemnantUpdate) SetWidth(f float64) *RemnantUpdate {
	ru.mutation.ResetWidth()
	ru.mutation.SetWidth(f)
	return ru
}

// AddWidth adds f to the "width" field.
func (ru *RemnantUpdate) AddWidth(f float64) *RemnantUpdate {
	ru.mutation.AddWidth(f)
	return ru
}

// SetThickness sets the "thickness" field.
func (ru *RemnantUpdate) SetThickness(f float64) *RemnantUpdate {
	ru.mutation.ResetThickness()
	ru.mutation.SetThickness(f)
	return ru
}

// AddThickness adds f to the "thickness" field.
func (ru *RemnantUpdate) AddThickness(f float64) *RemnantUpdate {
	ru.mutation.AddThickness(f)
	return ru
}

// SetNestID sets the "nest" edge to the Nest entity by ID.
func (ru *RemnantUpdate) SetNestID(id uuid.UUID) *RemnantUpdate {
	ru.mutation.SetNestID(id)
	return ru
}

// SetNest sets the "nest" edge to the Nest entity.
func (ru *RemnantUpdate) SetNest(n *Nest) *RemnantUpdate {
	return ru.SetNestID(n.ID)
}

// AddRemnantUsedIDs adds the "remnant_used" edge to the Nest entity by IDs.
func (ru *RemnantUpdate) AddRemnantUsedIDs(ids ...uuid.UUID) *RemnantUpdate {
	ru.mutation.AddRemnantUsedIDs(ids...)
	return ru
}

// AddRemnantUsed adds the "remnant_used" edges to the Nest entity.
func (ru *RemnantUpdate) AddRemnantUsed(n ...*Nest) *RemnantUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.AddRemnantUsedIDs(ids...)
}

// Mutation returns the RemnantMutation object of the builder.
func (ru *RemnantUpdate) Mutation() *RemnantMutation {
	return ru.mutation
}

// ClearNest clears the "nest" edge to the Nest entity.
func (ru *RemnantUpdate) ClearNest() *RemnantUpdate {
	ru.mutation.ClearNest()
	return ru
}

// ClearRemnantUsed clears all "remnant_used" edges to the Nest entity.
func (ru *RemnantUpdate) ClearRemnantUsed() *RemnantUpdate {
	ru.mutation.ClearRemnantUsed()
	return ru
}

// RemoveRemnantUsedIDs removes the "remnant_used" edge to Nest entities by IDs.
func (ru *RemnantUpdate) RemoveRemnantUsedIDs(ids ...uuid.UUID) *RemnantUpdate {
	ru.mutation.RemoveRemnantUsedIDs(ids...)
	return ru
}

// RemoveRemnantUsed removes "remnant_used" edges to Nest entities.
func (ru *RemnantUpdate) RemoveRemnantUsed(n ...*Nest) *RemnantUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.RemoveRemnantUsedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RemnantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RemnantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RemnantUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RemnantUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RemnantUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RemnantUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := remnant.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RemnantUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := remnant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Remnant.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Quality(); ok {
		if err := remnant.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Remnant.quality": %w`, err)}
		}
	}
	if v, ok := ru.mutation.GetType(); ok {
		if err := remnant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Remnant.type": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Length(); ok {
		if err := remnant.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Remnant.length": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Width(); ok {
		if err := remnant.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Remnant.width": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Thickness(); ok {
		if err := remnant.ThicknessValidator(v); err != nil {
			return &ValidationError{Name: "thickness", err: fmt.Errorf(`ent: validator failed for field "Remnant.thickness": %w`, err)}
		}
	}
	if _, ok := ru.mutation.NestID(); ru.mutation.NestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Remnant.nest"`)
	}
	return nil
}

func (ru *RemnantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   remnant.Table,
			Columns: remnant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: remnant.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: remnant.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldName,
		})
	}
	if value, ok := ru.mutation.Quality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldQuality,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldType,
		})
	}
	if value, ok := ru.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldLength,
		})
	}
	if value, ok := ru.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldLength,
		})
	}
	if value, ok := ru.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldWidth,
		})
	}
	if value, ok := ru.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldWidth,
		})
	}
	if value, ok := ru.mutation.Thickness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldThickness,
		})
	}
	if value, ok := ru.mutation.AddedThickness(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldThickness,
		})
	}
	if ru.mutation.NestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remnant.NestTable,
			Columns: []string{remnant.NestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.NestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remnant.NestTable,
			Columns: []string{remnant.NestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RemnantUsedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remnant.RemnantUsedTable,
			Columns: []string{remnant.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRemnantUsedIDs(); len(nodes) > 0 && !ru.mutation.RemnantUsedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remnant.RemnantUsedTable,
			Columns: []string{remnant.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemnantUsedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remnant.RemnantUsedTable,
			Columns: []string{remnant.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remnant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RemnantUpdateOne is the builder for updating a single Remnant entity.
type RemnantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RemnantMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RemnantUpdateOne) SetUpdatedAt(t time.Time) *RemnantUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RemnantUpdateOne) SetName(s string) *RemnantUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetQuality sets the "quality" field.
func (ruo *RemnantUpdateOne) SetQuality(s string) *RemnantUpdateOne {
	ruo.mutation.SetQuality(s)
	return ruo
}

// SetType sets the "type" field.
func (ruo *RemnantUpdateOne) SetType(s string) *RemnantUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetLength sets the "length" field.
func (ruo *RemnantUpdateOne) SetLength(f float64) *RemnantUpdateOne {
	ruo.mutation.ResetLength()
	ruo.mutation.SetLength(f)
	return ruo
}

// AddLength adds f to the "length" field.
func (ruo *RemnantUpdateOne) AddLength(f float64) *RemnantUpdateOne {
	ruo.mutation.AddLength(f)
	return ruo
}

// SetWidth sets the "width" field.
func (ruo *RemnantUpdateOne) SetWidth(f float64) *RemnantUpdateOne {
	ruo.mutation.ResetWidth()
	ruo.mutation.SetWidth(f)
	return ruo
}

// AddWidth adds f to the "width" field.
func (ruo *RemnantUpdateOne) AddWidth(f float64) *RemnantUpdateOne {
	ruo.mutation.AddWidth(f)
	return ruo
}

// SetThickness sets the "thickness" field.
func (ruo *RemnantUpdateOne) SetThickness(f float64) *RemnantUpdateOne {
	ruo.mutation.ResetThickness()
	ruo.mutation.SetThickness(f)
	return ruo
}

// AddThickness adds f to the "thickness" field.
func (ruo *RemnantUpdateOne) AddThickness(f float64) *RemnantUpdateOne {
	ruo.mutation.AddThickness(f)
	return ruo
}

// SetNestID sets the "nest" edge to the Nest entity by ID.
func (ruo *RemnantUpdateOne) SetNestID(id uuid.UUID) *RemnantUpdateOne {
	ruo.mutation.SetNestID(id)
	return ruo
}

// SetNest sets the "nest" edge to the Nest entity.
func (ruo *RemnantUpdateOne) SetNest(n *Nest) *RemnantUpdateOne {
	return ruo.SetNestID(n.ID)
}

// AddRemnantUsedIDs adds the "remnant_used" edge to the Nest entity by IDs.
func (ruo *RemnantUpdateOne) AddRemnantUsedIDs(ids ...uuid.UUID) *RemnantUpdateOne {
	ruo.mutation.AddRemnantUsedIDs(ids...)
	return ruo
}

// AddRemnantUsed adds the "remnant_used" edges to the Nest entity.
func (ruo *RemnantUpdateOne) AddRemnantUsed(n ...*Nest) *RemnantUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.AddRemnantUsedIDs(ids...)
}

// Mutation returns the RemnantMutation object of the builder.
func (ruo *RemnantUpdateOne) Mutation() *RemnantMutation {
	return ruo.mutation
}

// ClearNest clears the "nest" edge to the Nest entity.
func (ruo *RemnantUpdateOne) ClearNest() *RemnantUpdateOne {
	ruo.mutation.ClearNest()
	return ruo
}

// ClearRemnantUsed clears all "remnant_used" edges to the Nest entity.
func (ruo *RemnantUpdateOne) ClearRemnantUsed() *RemnantUpdateOne {
	ruo.mutation.ClearRemnantUsed()
	return ruo
}

// RemoveRemnantUsedIDs removes the "remnant_used" edge to Nest entities by IDs.
func (ruo *RemnantUpdateOne) RemoveRemnantUsedIDs(ids ...uuid.UUID) *RemnantUpdateOne {
	ruo.mutation.RemoveRemnantUsedIDs(ids...)
	return ruo
}

// RemoveRemnantUsed removes "remnant_used" edges to Nest entities.
func (ruo *RemnantUpdateOne) RemoveRemnantUsed(n ...*Nest) *RemnantUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.RemoveRemnantUsedIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RemnantUpdateOne) Select(field string, fields ...string) *RemnantUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Remnant entity.
func (ruo *RemnantUpdateOne) Save(ctx context.Context) (*Remnant, error) {
	var (
		err  error
		node *Remnant
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RemnantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Remnant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RemnantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RemnantUpdateOne) SaveX(ctx context.Context) *Remnant {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RemnantUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RemnantUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RemnantUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := remnant.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RemnantUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := remnant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Remnant.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Quality(); ok {
		if err := remnant.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Remnant.quality": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.GetType(); ok {
		if err := remnant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Remnant.type": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Length(); ok {
		if err := remnant.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Remnant.length": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Width(); ok {
		if err := remnant.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Remnant.width": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Thickness(); ok {
		if err := remnant.ThicknessValidator(v); err != nil {
			return &ValidationError{Name: "thickness", err: fmt.Errorf(`ent: validator failed for field "Remnant.thickness": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.NestID(); ruo.mutation.NestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Remnant.nest"`)
	}
	return nil
}

func (ruo *RemnantUpdateOne) sqlSave(ctx context.Context) (_node *Remnant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   remnant.Table,
			Columns: remnant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: remnant.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Remnant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, remnant.FieldID)
		for _, f := range fields {
			if !remnant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != remnant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: remnant.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldName,
		})
	}
	if value, ok := ruo.mutation.Quality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldQuality,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldType,
		})
	}
	if value, ok := ruo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldLength,
		})
	}
	if value, ok := ruo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldLength,
		})
	}
	if value, ok := ruo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldWidth,
		})
	}
	if value, ok := ruo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldWidth,
		})
	}
	if value, ok := ruo.mutation.Thickness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldThickness,
		})
	}
	if value, ok := ruo.mutation.AddedThickness(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldThickness,
		})
	}
	if ruo.mutation.NestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remnant.NestTable,
			Columns: []string{remnant.NestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.NestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remnant.NestTable,
			Columns: []string{remnant.NestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RemnantUsedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remnant.RemnantUsedTable,
			Columns: []string{remnant.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRemnantUsedIDs(); len(nodes) > 0 && !ruo.mutation.RemnantUsedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remnant.RemnantUsedTable,
			Columns: []string{remnant.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemnantUsedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remnant.RemnantUsedTable,
			Columns: []string{remnant.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Remnant{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remnant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
