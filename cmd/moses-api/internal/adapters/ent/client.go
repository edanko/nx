// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/migrate"
	"github.com/google/uuid"

	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/part"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/remnant"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Nest is the client for interacting with the Nest builders.
	Nest *NestClient
	// Part is the client for interacting with the Part builders.
	Part *PartClient
	// Remnant is the client for interacting with the Remnant builders.
	Remnant *RemnantClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Nest = NewNestClient(c.config)
	c.Part = NewPartClient(c.config)
	c.Remnant = NewRemnantClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Nest:    NewNestClient(cfg),
		Part:    NewPartClient(cfg),
		Remnant: NewRemnantClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Nest:    NewNestClient(cfg),
		Part:    NewPartClient(cfg),
		Remnant: NewRemnantClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Nest.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Nest.Use(hooks...)
	c.Part.Use(hooks...)
	c.Remnant.Use(hooks...)
}

// NestClient is a client for the Nest schema.
type NestClient struct {
	config
}

// NewNestClient returns a client for the Nest from the given config.
func NewNestClient(c config) *NestClient {
	return &NestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nest.Hooks(f(g(h())))`.
func (c *NestClient) Use(hooks ...Hook) {
	c.hooks.Nest = append(c.hooks.Nest, hooks...)
}

// Create returns a builder for creating a Nest entity.
func (c *NestClient) Create() *NestCreate {
	mutation := newNestMutation(c.config, OpCreate)
	return &NestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Nest entities.
func (c *NestClient) CreateBulk(builders ...*NestCreate) *NestCreateBulk {
	return &NestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Nest.
func (c *NestClient) Update() *NestUpdate {
	mutation := newNestMutation(c.config, OpUpdate)
	return &NestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NestClient) UpdateOne(n *Nest) *NestUpdateOne {
	mutation := newNestMutation(c.config, OpUpdateOne, withNest(n))
	return &NestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NestClient) UpdateOneID(id uuid.UUID) *NestUpdateOne {
	mutation := newNestMutation(c.config, OpUpdateOne, withNestID(id))
	return &NestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nest.
func (c *NestClient) Delete() *NestDelete {
	mutation := newNestMutation(c.config, OpDelete)
	return &NestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NestClient) DeleteOne(n *Nest) *NestDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *NestClient) DeleteOneID(id uuid.UUID) *NestDeleteOne {
	builder := c.Delete().Where(nest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NestDeleteOne{builder}
}

// Query returns a query builder for Nest.
func (c *NestClient) Query() *NestQuery {
	return &NestQuery{
		config: c.config,
	}
}

// Get returns a Nest entity by its id.
func (c *NestClient) Get(ctx context.Context, id uuid.UUID) (*Nest, error) {
	return c.Query().Where(nest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NestClient) GetX(ctx context.Context, id uuid.UUID) *Nest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParts queries the parts edge of a Nest.
func (c *NestClient) QueryParts(n *Nest) *PartQuery {
	query := &PartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nest.Table, nest.FieldID, id),
			sqlgraph.To(part.Table, part.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, nest.PartsTable, nest.PartsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRemnant queries the remnant edge of a Nest.
func (c *NestClient) QueryRemnant(n *Nest) *RemnantQuery {
	query := &RemnantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nest.Table, nest.FieldID, id),
			sqlgraph.To(remnant.Table, remnant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, nest.RemnantTable, nest.RemnantColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRemnantUsed queries the remnant_used edge of a Nest.
func (c *NestClient) QueryRemnantUsed(n *Nest) *RemnantQuery {
	query := &RemnantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nest.Table, nest.FieldID, id),
			sqlgraph.To(remnant.Table, remnant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, nest.RemnantUsedTable, nest.RemnantUsedColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NestClient) Hooks() []Hook {
	return c.hooks.Nest
}

// PartClient is a client for the Part schema.
type PartClient struct {
	config
}

// NewPartClient returns a client for the Part from the given config.
func NewPartClient(c config) *PartClient {
	return &PartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `part.Hooks(f(g(h())))`.
func (c *PartClient) Use(hooks ...Hook) {
	c.hooks.Part = append(c.hooks.Part, hooks...)
}

// Create returns a builder for creating a Part entity.
func (c *PartClient) Create() *PartCreate {
	mutation := newPartMutation(c.config, OpCreate)
	return &PartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Part entities.
func (c *PartClient) CreateBulk(builders ...*PartCreate) *PartCreateBulk {
	return &PartCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Part.
func (c *PartClient) Update() *PartUpdate {
	mutation := newPartMutation(c.config, OpUpdate)
	return &PartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartClient) UpdateOne(pa *Part) *PartUpdateOne {
	mutation := newPartMutation(c.config, OpUpdateOne, withPart(pa))
	return &PartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartClient) UpdateOneID(id uuid.UUID) *PartUpdateOne {
	mutation := newPartMutation(c.config, OpUpdateOne, withPartID(id))
	return &PartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Part.
func (c *PartClient) Delete() *PartDelete {
	mutation := newPartMutation(c.config, OpDelete)
	return &PartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartClient) DeleteOne(pa *Part) *PartDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PartClient) DeleteOneID(id uuid.UUID) *PartDeleteOne {
	builder := c.Delete().Where(part.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartDeleteOne{builder}
}

// Query returns a query builder for Part.
func (c *PartClient) Query() *PartQuery {
	return &PartQuery{
		config: c.config,
	}
}

// Get returns a Part entity by its id.
func (c *PartClient) Get(ctx context.Context, id uuid.UUID) (*Part, error) {
	return c.Query().Where(part.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartClient) GetX(ctx context.Context, id uuid.UUID) *Part {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNests queries the nests edge of a Part.
func (c *PartClient) QueryNests(pa *Part) *NestQuery {
	query := &NestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(part.Table, part.FieldID, id),
			sqlgraph.To(nest.Table, nest.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, part.NestsTable, part.NestsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartClient) Hooks() []Hook {
	return c.hooks.Part
}

// RemnantClient is a client for the Remnant schema.
type RemnantClient struct {
	config
}

// NewRemnantClient returns a client for the Remnant from the given config.
func NewRemnantClient(c config) *RemnantClient {
	return &RemnantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `remnant.Hooks(f(g(h())))`.
func (c *RemnantClient) Use(hooks ...Hook) {
	c.hooks.Remnant = append(c.hooks.Remnant, hooks...)
}

// Create returns a builder for creating a Remnant entity.
func (c *RemnantClient) Create() *RemnantCreate {
	mutation := newRemnantMutation(c.config, OpCreate)
	return &RemnantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Remnant entities.
func (c *RemnantClient) CreateBulk(builders ...*RemnantCreate) *RemnantCreateBulk {
	return &RemnantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Remnant.
func (c *RemnantClient) Update() *RemnantUpdate {
	mutation := newRemnantMutation(c.config, OpUpdate)
	return &RemnantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RemnantClient) UpdateOne(r *Remnant) *RemnantUpdateOne {
	mutation := newRemnantMutation(c.config, OpUpdateOne, withRemnant(r))
	return &RemnantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RemnantClient) UpdateOneID(id uuid.UUID) *RemnantUpdateOne {
	mutation := newRemnantMutation(c.config, OpUpdateOne, withRemnantID(id))
	return &RemnantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Remnant.
func (c *RemnantClient) Delete() *RemnantDelete {
	mutation := newRemnantMutation(c.config, OpDelete)
	return &RemnantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RemnantClient) DeleteOne(r *Remnant) *RemnantDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RemnantClient) DeleteOneID(id uuid.UUID) *RemnantDeleteOne {
	builder := c.Delete().Where(remnant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RemnantDeleteOne{builder}
}

// Query returns a query builder for Remnant.
func (c *RemnantClient) Query() *RemnantQuery {
	return &RemnantQuery{
		config: c.config,
	}
}

// Get returns a Remnant entity by its id.
func (c *RemnantClient) Get(ctx context.Context, id uuid.UUID) (*Remnant, error) {
	return c.Query().Where(remnant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RemnantClient) GetX(ctx context.Context, id uuid.UUID) *Remnant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNest queries the nest edge of a Remnant.
func (c *RemnantClient) QueryNest(r *Remnant) *NestQuery {
	query := &NestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(remnant.Table, remnant.FieldID, id),
			sqlgraph.To(nest.Table, nest.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, remnant.NestTable, remnant.NestColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRemnantUsed queries the remnant_used edge of a Remnant.
func (c *RemnantClient) QueryRemnantUsed(r *Remnant) *NestQuery {
	query := &NestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(remnant.Table, remnant.FieldID, id),
			sqlgraph.To(nest.Table, nest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, remnant.RemnantUsedTable, remnant.RemnantUsedColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RemnantClient) Hooks() []Hook {
	return c.hooks.Remnant
}
