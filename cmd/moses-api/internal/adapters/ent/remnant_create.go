// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/remnant"
	"github.com/google/uuid"
)

// RemnantCreate is the builder for creating a Remnant entity.
type RemnantCreate struct {
	config
	mutation *RemnantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RemnantCreate) SetCreatedAt(t time.Time) *RemnantCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RemnantCreate) SetNillableCreatedAt(t *time.Time) *RemnantCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RemnantCreate) SetUpdatedAt(t time.Time) *RemnantCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RemnantCreate) SetNillableUpdatedAt(t *time.Time) *RemnantCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RemnantCreate) SetName(s string) *RemnantCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetQuality sets the "quality" field.
func (rc *RemnantCreate) SetQuality(s string) *RemnantCreate {
	rc.mutation.SetQuality(s)
	return rc
}

// SetType sets the "type" field.
func (rc *RemnantCreate) SetType(s string) *RemnantCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetLength sets the "length" field.
func (rc *RemnantCreate) SetLength(f float64) *RemnantCreate {
	rc.mutation.SetLength(f)
	return rc
}

// SetWidth sets the "width" field.
func (rc *RemnantCreate) SetWidth(f float64) *RemnantCreate {
	rc.mutation.SetWidth(f)
	return rc
}

// SetThickness sets the "thickness" field.
func (rc *RemnantCreate) SetThickness(f float64) *RemnantCreate {
	rc.mutation.SetThickness(f)
	return rc
}

// SetID sets the "id" field.
func (rc *RemnantCreate) SetID(u uuid.UUID) *RemnantCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RemnantCreate) SetNillableID(u *uuid.UUID) *RemnantCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetNestID sets the "nest" edge to the Nest entity by ID.
func (rc *RemnantCreate) SetNestID(id uuid.UUID) *RemnantCreate {
	rc.mutation.SetNestID(id)
	return rc
}

// SetNest sets the "nest" edge to the Nest entity.
func (rc *RemnantCreate) SetNest(n *Nest) *RemnantCreate {
	return rc.SetNestID(n.ID)
}

// AddRemnantUsedIDs adds the "remnant_used" edge to the Nest entity by IDs.
func (rc *RemnantCreate) AddRemnantUsedIDs(ids ...uuid.UUID) *RemnantCreate {
	rc.mutation.AddRemnantUsedIDs(ids...)
	return rc
}

// AddRemnantUsed adds the "remnant_used" edges to the Nest entity.
func (rc *RemnantCreate) AddRemnantUsed(n ...*Nest) *RemnantCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return rc.AddRemnantUsedIDs(ids...)
}

// Mutation returns the RemnantMutation object of the builder.
func (rc *RemnantCreate) Mutation() *RemnantMutation {
	return rc.mutation
}

// Save creates the Remnant in the database.
func (rc *RemnantCreate) Save(ctx context.Context) (*Remnant, error) {
	var (
		err  error
		node *Remnant
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RemnantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Remnant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RemnantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RemnantCreate) SaveX(ctx context.Context) *Remnant {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RemnantCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RemnantCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RemnantCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := remnant.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := remnant.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := remnant.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RemnantCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Remnant.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Remnant.updated_at"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Remnant.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := remnant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Remnant.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Quality(); !ok {
		return &ValidationError{Name: "quality", err: errors.New(`ent: missing required field "Remnant.quality"`)}
	}
	if v, ok := rc.mutation.Quality(); ok {
		if err := remnant.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Remnant.quality": %w`, err)}
		}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Remnant.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := remnant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Remnant.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`ent: missing required field "Remnant.length"`)}
	}
	if v, ok := rc.mutation.Length(); ok {
		if err := remnant.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Remnant.length": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Remnant.width"`)}
	}
	if v, ok := rc.mutation.Width(); ok {
		if err := remnant.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Remnant.width": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Thickness(); !ok {
		return &ValidationError{Name: "thickness", err: errors.New(`ent: missing required field "Remnant.thickness"`)}
	}
	if v, ok := rc.mutation.Thickness(); ok {
		if err := remnant.ThicknessValidator(v); err != nil {
			return &ValidationError{Name: "thickness", err: fmt.Errorf(`ent: validator failed for field "Remnant.thickness": %w`, err)}
		}
	}
	if _, ok := rc.mutation.NestID(); !ok {
		return &ValidationError{Name: "nest", err: errors.New(`ent: missing required edge "Remnant.nest"`)}
	}
	return nil
}

func (rc *RemnantCreate) sqlSave(ctx context.Context) (*Remnant, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *RemnantCreate) createSpec() (*Remnant, *sqlgraph.CreateSpec) {
	var (
		_node = &Remnant{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: remnant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: remnant.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: remnant.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: remnant.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.Quality(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldQuality,
		})
		_node.Quality = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: remnant.FieldType,
		})
		_node.Type = value
	}
	if value, ok := rc.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldLength,
		})
		_node.Length = value
	}
	if value, ok := rc.mutation.Width(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldWidth,
		})
		_node.Width = value
	}
	if value, ok := rc.mutation.Thickness(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: remnant.FieldThickness,
		})
		_node.Thickness = value
	}
	if nodes := rc.mutation.NestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   remnant.NestTable,
			Columns: []string{remnant.NestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.nest_remnant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RemnantUsedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   remnant.RemnantUsedTable,
			Columns: []string{remnant.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RemnantCreateBulk is the builder for creating many Remnant entities in bulk.
type RemnantCreateBulk struct {
	config
	builders []*RemnantCreate
}

// Save creates the Remnant entities in the database.
func (rcb *RemnantCreateBulk) Save(ctx context.Context) ([]*Remnant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Remnant, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RemnantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RemnantCreateBulk) SaveX(ctx context.Context) []*Remnant {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RemnantCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RemnantCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
