// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/part"
	"github.com/google/uuid"
)

// Part is the model entity for the Part schema.
type Part struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Project holds the value of the "project" field.
	Project string `json:"project,omitempty"`
	// Section holds the value of the "section" field.
	Section string `json:"section,omitempty"`
	// Pos holds the value of the "pos" field.
	Pos string `json:"pos,omitempty"`
	// Quality holds the value of the "quality" field.
	Quality string `json:"quality,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Length holds the value of the "length" field.
	Length float64 `json:"length,omitempty"`
	// Width holds the value of the "width" field.
	Width float64 `json:"width,omitempty"`
	// Thickness holds the value of the "thickness" field.
	Thickness float64 `json:"thickness,omitempty"`
	// Count holds the value of the "count" field.
	Count int64 `json:"count,omitempty"`
	// Nested holds the value of the "nested" field.
	Nested int64 `json:"nested,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartQuery when eager-loading is set.
	Edges PartEdges `json:"edges"`
}

// PartEdges holds the relations/edges for other nodes in the graph.
type PartEdges struct {
	// Nests holds the value of the nests edge.
	Nests []*Nest `json:"nests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NestsOrErr returns the Nests value or an error if the edge
// was not loaded in eager-loading.
func (e PartEdges) NestsOrErr() ([]*Nest, error) {
	if e.loadedTypes[0] {
		return e.Nests, nil
	}
	return nil, &NotLoadedError{edge: "nests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Part) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case part.FieldLength, part.FieldWidth, part.FieldThickness:
			values[i] = new(sql.NullFloat64)
		case part.FieldCount, part.FieldNested:
			values[i] = new(sql.NullInt64)
		case part.FieldProject, part.FieldSection, part.FieldPos, part.FieldQuality, part.FieldType:
			values[i] = new(sql.NullString)
		case part.FieldCreatedAt, part.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case part.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Part", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Part fields.
func (pa *Part) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case part.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case part.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case part.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case part.FieldProject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project", values[i])
			} else if value.Valid {
				pa.Project = value.String
			}
		case part.FieldSection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field section", values[i])
			} else if value.Valid {
				pa.Section = value.String
			}
		case part.FieldPos:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pos", values[i])
			} else if value.Valid {
				pa.Pos = value.String
			}
		case part.FieldQuality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quality", values[i])
			} else if value.Valid {
				pa.Quality = value.String
			}
		case part.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = value.String
			}
		case part.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				pa.Length = value.Float64
			}
		case part.FieldWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				pa.Width = value.Float64
			}
		case part.FieldThickness:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field thickness", values[i])
			} else if value.Valid {
				pa.Thickness = value.Float64
			}
		case part.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				pa.Count = value.Int64
			}
		case part.FieldNested:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nested", values[i])
			} else if value.Valid {
				pa.Nested = value.Int64
			}
		}
	}
	return nil
}

// QueryNests queries the "nests" edge of the Part entity.
func (pa *Part) QueryNests() *NestQuery {
	return (&PartClient{config: pa.config}).QueryNests(pa)
}

// Update returns a builder for updating this Part.
// Note that you need to call Part.Unwrap() before calling this method if this Part
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Part) Update() *PartUpdateOne {
	return (&PartClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Part entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Part) Unwrap() *Part {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Part is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Part) String() string {
	var builder strings.Builder
	builder.WriteString("Part(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project=")
	builder.WriteString(pa.Project)
	builder.WriteString(", ")
	builder.WriteString("section=")
	builder.WriteString(pa.Section)
	builder.WriteString(", ")
	builder.WriteString("pos=")
	builder.WriteString(pa.Pos)
	builder.WriteString(", ")
	builder.WriteString("quality=")
	builder.WriteString(pa.Quality)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pa.Type)
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", pa.Length))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", pa.Width))
	builder.WriteString(", ")
	builder.WriteString("thickness=")
	builder.WriteString(fmt.Sprintf("%v", pa.Thickness))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", pa.Count))
	builder.WriteString(", ")
	builder.WriteString("nested=")
	builder.WriteString(fmt.Sprintf("%v", pa.Nested))
	builder.WriteByte(')')
	return builder.String()
}

// Parts is a parsable slice of Part.
type Parts []*Part

func (pa Parts) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
