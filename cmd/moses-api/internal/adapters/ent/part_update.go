// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/part"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/predicate"
	"github.com/google/uuid"
)

// PartUpdate is the builder for updating Part entities.
type PartUpdate struct {
	config
	hooks    []Hook
	mutation *PartMutation
}

// Where appends a list predicates to the PartUpdate builder.
func (pu *PartUpdate) Where(ps ...predicate.Part) *PartUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PartUpdate) SetUpdatedAt(t time.Time) *PartUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetProject sets the "project" field.
func (pu *PartUpdate) SetProject(s string) *PartUpdate {
	pu.mutation.SetProject(s)
	return pu
}

// SetSection sets the "section" field.
func (pu *PartUpdate) SetSection(s string) *PartUpdate {
	pu.mutation.SetSection(s)
	return pu
}

// SetPos sets the "pos" field.
func (pu *PartUpdate) SetPos(s string) *PartUpdate {
	pu.mutation.SetPos(s)
	return pu
}

// SetQuality sets the "quality" field.
func (pu *PartUpdate) SetQuality(s string) *PartUpdate {
	pu.mutation.SetQuality(s)
	return pu
}

// SetType sets the "type" field.
func (pu *PartUpdate) SetType(s string) *PartUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetLength sets the "length" field.
func (pu *PartUpdate) SetLength(f float64) *PartUpdate {
	pu.mutation.ResetLength()
	pu.mutation.SetLength(f)
	return pu
}

// AddLength adds f to the "length" field.
func (pu *PartUpdate) AddLength(f float64) *PartUpdate {
	pu.mutation.AddLength(f)
	return pu
}

// SetWidth sets the "width" field.
func (pu *PartUpdate) SetWidth(f float64) *PartUpdate {
	pu.mutation.ResetWidth()
	pu.mutation.SetWidth(f)
	return pu
}

// AddWidth adds f to the "width" field.
func (pu *PartUpdate) AddWidth(f float64) *PartUpdate {
	pu.mutation.AddWidth(f)
	return pu
}

// SetThickness sets the "thickness" field.
func (pu *PartUpdate) SetThickness(f float64) *PartUpdate {
	pu.mutation.ResetThickness()
	pu.mutation.SetThickness(f)
	return pu
}

// AddThickness adds f to the "thickness" field.
func (pu *PartUpdate) AddThickness(f float64) *PartUpdate {
	pu.mutation.AddThickness(f)
	return pu
}

// SetCount sets the "count" field.
func (pu *PartUpdate) SetCount(i int64) *PartUpdate {
	pu.mutation.ResetCount()
	pu.mutation.SetCount(i)
	return pu
}

// AddCount adds i to the "count" field.
func (pu *PartUpdate) AddCount(i int64) *PartUpdate {
	pu.mutation.AddCount(i)
	return pu
}

// SetNested sets the "nested" field.
func (pu *PartUpdate) SetNested(i int64) *PartUpdate {
	pu.mutation.ResetNested()
	pu.mutation.SetNested(i)
	return pu
}

// AddNested adds i to the "nested" field.
func (pu *PartUpdate) AddNested(i int64) *PartUpdate {
	pu.mutation.AddNested(i)
	return pu
}

// AddNestIDs adds the "nests" edge to the Nest entity by IDs.
func (pu *PartUpdate) AddNestIDs(ids ...uuid.UUID) *PartUpdate {
	pu.mutation.AddNestIDs(ids...)
	return pu
}

// AddNests adds the "nests" edges to the Nest entity.
func (pu *PartUpdate) AddNests(n ...*Nest) *PartUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNestIDs(ids...)
}

// Mutation returns the PartMutation object of the builder.
func (pu *PartUpdate) Mutation() *PartMutation {
	return pu.mutation
}

// ClearNests clears all "nests" edges to the Nest entity.
func (pu *PartUpdate) ClearNests() *PartUpdate {
	pu.mutation.ClearNests()
	return pu
}

// RemoveNestIDs removes the "nests" edge to Nest entities by IDs.
func (pu *PartUpdate) RemoveNestIDs(ids ...uuid.UUID) *PartUpdate {
	pu.mutation.RemoveNestIDs(ids...)
	return pu
}

// RemoveNests removes "nests" edges to Nest entities.
func (pu *PartUpdate) RemoveNests(n ...*Nest) *PartUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PartUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := part.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartUpdate) check() error {
	if v, ok := pu.mutation.Project(); ok {
		if err := part.ProjectValidator(v); err != nil {
			return &ValidationError{Name: "project", err: fmt.Errorf(`ent: validator failed for field "Part.project": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Section(); ok {
		if err := part.SectionValidator(v); err != nil {
			return &ValidationError{Name: "section", err: fmt.Errorf(`ent: validator failed for field "Part.section": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Pos(); ok {
		if err := part.PosValidator(v); err != nil {
			return &ValidationError{Name: "pos", err: fmt.Errorf(`ent: validator failed for field "Part.pos": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Quality(); ok {
		if err := part.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Part.quality": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := part.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Part.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Length(); ok {
		if err := part.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Part.length": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Width(); ok {
		if err := part.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Part.width": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Thickness(); ok {
		if err := part.ThicknessValidator(v); err != nil {
			return &ValidationError{Name: "thickness", err: fmt.Errorf(`ent: validator failed for field "Part.thickness": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Count(); ok {
		if err := part.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "Part.count": %w`, err)}
		}
	}
	return nil
}

func (pu *PartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   part.Table,
			Columns: part.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: part.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: part.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Project(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldProject,
		})
	}
	if value, ok := pu.mutation.Section(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldSection,
		})
	}
	if value, ok := pu.mutation.Pos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldPos,
		})
	}
	if value, ok := pu.mutation.Quality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldQuality,
		})
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldType,
		})
	}
	if value, ok := pu.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldLength,
		})
	}
	if value, ok := pu.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldLength,
		})
	}
	if value, ok := pu.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldWidth,
		})
	}
	if value, ok := pu.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldWidth,
		})
	}
	if value, ok := pu.mutation.Thickness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldThickness,
		})
	}
	if value, ok := pu.mutation.AddedThickness(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldThickness,
		})
	}
	if value, ok := pu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldCount,
		})
	}
	if value, ok := pu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldCount,
		})
	}
	if value, ok := pu.mutation.Nested(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldNested,
		})
	}
	if value, ok := pu.mutation.AddedNested(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldNested,
		})
	}
	if pu.mutation.NestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   part.NestsTable,
			Columns: part.NestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNestsIDs(); len(nodes) > 0 && !pu.mutation.NestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   part.NestsTable,
			Columns: part.NestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   part.NestsTable,
			Columns: part.NestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{part.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PartUpdateOne is the builder for updating a single Part entity.
type PartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PartUpdateOne) SetUpdatedAt(t time.Time) *PartUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetProject sets the "project" field.
func (puo *PartUpdateOne) SetProject(s string) *PartUpdateOne {
	puo.mutation.SetProject(s)
	return puo
}

// SetSection sets the "section" field.
func (puo *PartUpdateOne) SetSection(s string) *PartUpdateOne {
	puo.mutation.SetSection(s)
	return puo
}

// SetPos sets the "pos" field.
func (puo *PartUpdateOne) SetPos(s string) *PartUpdateOne {
	puo.mutation.SetPos(s)
	return puo
}

// SetQuality sets the "quality" field.
func (puo *PartUpdateOne) SetQuality(s string) *PartUpdateOne {
	puo.mutation.SetQuality(s)
	return puo
}

// SetType sets the "type" field.
func (puo *PartUpdateOne) SetType(s string) *PartUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetLength sets the "length" field.
func (puo *PartUpdateOne) SetLength(f float64) *PartUpdateOne {
	puo.mutation.ResetLength()
	puo.mutation.SetLength(f)
	return puo
}

// AddLength adds f to the "length" field.
func (puo *PartUpdateOne) AddLength(f float64) *PartUpdateOne {
	puo.mutation.AddLength(f)
	return puo
}

// SetWidth sets the "width" field.
func (puo *PartUpdateOne) SetWidth(f float64) *PartUpdateOne {
	puo.mutation.ResetWidth()
	puo.mutation.SetWidth(f)
	return puo
}

// AddWidth adds f to the "width" field.
func (puo *PartUpdateOne) AddWidth(f float64) *PartUpdateOne {
	puo.mutation.AddWidth(f)
	return puo
}

// SetThickness sets the "thickness" field.
func (puo *PartUpdateOne) SetThickness(f float64) *PartUpdateOne {
	puo.mutation.ResetThickness()
	puo.mutation.SetThickness(f)
	return puo
}

// AddThickness adds f to the "thickness" field.
func (puo *PartUpdateOne) AddThickness(f float64) *PartUpdateOne {
	puo.mutation.AddThickness(f)
	return puo
}

// SetCount sets the "count" field.
func (puo *PartUpdateOne) SetCount(i int64) *PartUpdateOne {
	puo.mutation.ResetCount()
	puo.mutation.SetCount(i)
	return puo
}

// AddCount adds i to the "count" field.
func (puo *PartUpdateOne) AddCount(i int64) *PartUpdateOne {
	puo.mutation.AddCount(i)
	return puo
}

// SetNested sets the "nested" field.
func (puo *PartUpdateOne) SetNested(i int64) *PartUpdateOne {
	puo.mutation.ResetNested()
	puo.mutation.SetNested(i)
	return puo
}

// AddNested adds i to the "nested" field.
func (puo *PartUpdateOne) AddNested(i int64) *PartUpdateOne {
	puo.mutation.AddNested(i)
	return puo
}

// AddNestIDs adds the "nests" edge to the Nest entity by IDs.
func (puo *PartUpdateOne) AddNestIDs(ids ...uuid.UUID) *PartUpdateOne {
	puo.mutation.AddNestIDs(ids...)
	return puo
}

// AddNests adds the "nests" edges to the Nest entity.
func (puo *PartUpdateOne) AddNests(n ...*Nest) *PartUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNestIDs(ids...)
}

// Mutation returns the PartMutation object of the builder.
func (puo *PartUpdateOne) Mutation() *PartMutation {
	return puo.mutation
}

// ClearNests clears all "nests" edges to the Nest entity.
func (puo *PartUpdateOne) ClearNests() *PartUpdateOne {
	puo.mutation.ClearNests()
	return puo
}

// RemoveNestIDs removes the "nests" edge to Nest entities by IDs.
func (puo *PartUpdateOne) RemoveNestIDs(ids ...uuid.UUID) *PartUpdateOne {
	puo.mutation.RemoveNestIDs(ids...)
	return puo
}

// RemoveNests removes "nests" edges to Nest entities.
func (puo *PartUpdateOne) RemoveNests(n ...*Nest) *PartUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNestIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartUpdateOne) Select(field string, fields ...string) *PartUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Part entity.
func (puo *PartUpdateOne) Save(ctx context.Context) (*Part, error) {
	var (
		err  error
		node *Part
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Part)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PartMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartUpdateOne) SaveX(ctx context.Context) *Part {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PartUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := part.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartUpdateOne) check() error {
	if v, ok := puo.mutation.Project(); ok {
		if err := part.ProjectValidator(v); err != nil {
			return &ValidationError{Name: "project", err: fmt.Errorf(`ent: validator failed for field "Part.project": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Section(); ok {
		if err := part.SectionValidator(v); err != nil {
			return &ValidationError{Name: "section", err: fmt.Errorf(`ent: validator failed for field "Part.section": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Pos(); ok {
		if err := part.PosValidator(v); err != nil {
			return &ValidationError{Name: "pos", err: fmt.Errorf(`ent: validator failed for field "Part.pos": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Quality(); ok {
		if err := part.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Part.quality": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := part.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Part.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Length(); ok {
		if err := part.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Part.length": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Width(); ok {
		if err := part.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Part.width": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Thickness(); ok {
		if err := part.ThicknessValidator(v); err != nil {
			return &ValidationError{Name: "thickness", err: fmt.Errorf(`ent: validator failed for field "Part.thickness": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Count(); ok {
		if err := part.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "Part.count": %w`, err)}
		}
	}
	return nil
}

func (puo *PartUpdateOne) sqlSave(ctx context.Context) (_node *Part, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   part.Table,
			Columns: part.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: part.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Part.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, part.FieldID)
		for _, f := range fields {
			if !part.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != part.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: part.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Project(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldProject,
		})
	}
	if value, ok := puo.mutation.Section(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldSection,
		})
	}
	if value, ok := puo.mutation.Pos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldPos,
		})
	}
	if value, ok := puo.mutation.Quality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldQuality,
		})
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldType,
		})
	}
	if value, ok := puo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldLength,
		})
	}
	if value, ok := puo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldLength,
		})
	}
	if value, ok := puo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldWidth,
		})
	}
	if value, ok := puo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldWidth,
		})
	}
	if value, ok := puo.mutation.Thickness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldThickness,
		})
	}
	if value, ok := puo.mutation.AddedThickness(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldThickness,
		})
	}
	if value, ok := puo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldCount,
		})
	}
	if value, ok := puo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldCount,
		})
	}
	if value, ok := puo.mutation.Nested(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldNested,
		})
	}
	if value, ok := puo.mutation.AddedNested(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldNested,
		})
	}
	if puo.mutation.NestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   part.NestsTable,
			Columns: part.NestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNestsIDs(); len(nodes) > 0 && !puo.mutation.NestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   part.NestsTable,
			Columns: part.NestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   part.NestsTable,
			Columns: part.NestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Part{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{part.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
