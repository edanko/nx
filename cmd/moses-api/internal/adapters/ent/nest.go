// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/remnant"
	"github.com/google/uuid"
)

// Nest is the model entity for the Nest schema.
type Nest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Length holds the value of the "length" field.
	Length float64 `json:"length,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NestQuery when eager-loading is set.
	Edges                NestEdges `json:"edges"`
	remnant_remnant_used *uuid.UUID
}

// NestEdges holds the relations/edges for other nodes in the graph.
type NestEdges struct {
	// Parts holds the value of the parts edge.
	Parts []*Part `json:"parts,omitempty"`
	// Remnant holds the value of the remnant edge.
	Remnant *Remnant `json:"remnant,omitempty"`
	// RemnantUsed holds the value of the remnant_used edge.
	RemnantUsed *Remnant `json:"remnant_used,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PartsOrErr returns the Parts value or an error if the edge
// was not loaded in eager-loading.
func (e NestEdges) PartsOrErr() ([]*Part, error) {
	if e.loadedTypes[0] {
		return e.Parts, nil
	}
	return nil, &NotLoadedError{edge: "parts"}
}

// RemnantOrErr returns the Remnant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NestEdges) RemnantOrErr() (*Remnant, error) {
	if e.loadedTypes[1] {
		if e.Remnant == nil {
			// The edge remnant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: remnant.Label}
		}
		return e.Remnant, nil
	}
	return nil, &NotLoadedError{edge: "remnant"}
}

// RemnantUsedOrErr returns the RemnantUsed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NestEdges) RemnantUsedOrErr() (*Remnant, error) {
	if e.loadedTypes[2] {
		if e.RemnantUsed == nil {
			// The edge remnant_used was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: remnant.Label}
		}
		return e.RemnantUsed, nil
	}
	return nil, &NotLoadedError{edge: "remnant_used"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case nest.FieldLength:
			values[i] = new(sql.NullFloat64)
		case nest.FieldName:
			values[i] = new(sql.NullString)
		case nest.FieldCreatedAt, nest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case nest.FieldID:
			values[i] = new(uuid.UUID)
		case nest.ForeignKeys[0]: // remnant_remnant_used
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Nest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nest fields.
func (n *Nest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case nest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case nest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case nest.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case nest.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				n.Length = value.Float64
			}
		case nest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field remnant_remnant_used", values[i])
			} else if value.Valid {
				n.remnant_remnant_used = new(uuid.UUID)
				*n.remnant_remnant_used = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryParts queries the "parts" edge of the Nest entity.
func (n *Nest) QueryParts() *PartQuery {
	return (&NestClient{config: n.config}).QueryParts(n)
}

// QueryRemnant queries the "remnant" edge of the Nest entity.
func (n *Nest) QueryRemnant() *RemnantQuery {
	return (&NestClient{config: n.config}).QueryRemnant(n)
}

// QueryRemnantUsed queries the "remnant_used" edge of the Nest entity.
func (n *Nest) QueryRemnantUsed() *RemnantQuery {
	return (&NestClient{config: n.config}).QueryRemnantUsed(n)
}

// Update returns a builder for updating this Nest.
// Note that you need to call Nest.Unwrap() before calling this method if this Nest
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nest) Update() *NestUpdateOne {
	return (&NestClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Nest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Nest) Unwrap() *Nest {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nest is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nest) String() string {
	var builder strings.Builder
	builder.WriteString("Nest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", n.Length))
	builder.WriteByte(')')
	return builder.String()
}

// Nests is a parsable slice of Nest.
type Nests []*Nest

func (n Nests) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
