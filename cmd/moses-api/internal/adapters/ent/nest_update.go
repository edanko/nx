// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/part"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/predicate"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/remnant"
	"github.com/google/uuid"
)

// NestUpdate is the builder for updating Nest entities.
type NestUpdate struct {
	config
	hooks    []Hook
	mutation *NestMutation
}

// Where appends a list predicates to the NestUpdate builder.
func (nu *NestUpdate) Where(ps ...predicate.Nest) *NestUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NestUpdate) SetUpdatedAt(t time.Time) *NestUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetName sets the "name" field.
func (nu *NestUpdate) SetName(s string) *NestUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetLength sets the "length" field.
func (nu *NestUpdate) SetLength(f float64) *NestUpdate {
	nu.mutation.ResetLength()
	nu.mutation.SetLength(f)
	return nu
}

// AddLength adds f to the "length" field.
func (nu *NestUpdate) AddLength(f float64) *NestUpdate {
	nu.mutation.AddLength(f)
	return nu
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (nu *NestUpdate) AddPartIDs(ids ...uuid.UUID) *NestUpdate {
	nu.mutation.AddPartIDs(ids...)
	return nu
}

// AddParts adds the "parts" edges to the Part entity.
func (nu *NestUpdate) AddParts(p ...*Part) *NestUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddPartIDs(ids...)
}

// SetRemnantID sets the "remnant" edge to the Remnant entity by ID.
func (nu *NestUpdate) SetRemnantID(id uuid.UUID) *NestUpdate {
	nu.mutation.SetRemnantID(id)
	return nu
}

// SetNillableRemnantID sets the "remnant" edge to the Remnant entity by ID if the given value is not nil.
func (nu *NestUpdate) SetNillableRemnantID(id *uuid.UUID) *NestUpdate {
	if id != nil {
		nu = nu.SetRemnantID(*id)
	}
	return nu
}

// SetRemnant sets the "remnant" edge to the Remnant entity.
func (nu *NestUpdate) SetRemnant(r *Remnant) *NestUpdate {
	return nu.SetRemnantID(r.ID)
}

// SetRemnantUsedID sets the "remnant_used" edge to the Remnant entity by ID.
func (nu *NestUpdate) SetRemnantUsedID(id uuid.UUID) *NestUpdate {
	nu.mutation.SetRemnantUsedID(id)
	return nu
}

// SetNillableRemnantUsedID sets the "remnant_used" edge to the Remnant entity by ID if the given value is not nil.
func (nu *NestUpdate) SetNillableRemnantUsedID(id *uuid.UUID) *NestUpdate {
	if id != nil {
		nu = nu.SetRemnantUsedID(*id)
	}
	return nu
}

// SetRemnantUsed sets the "remnant_used" edge to the Remnant entity.
func (nu *NestUpdate) SetRemnantUsed(r *Remnant) *NestUpdate {
	return nu.SetRemnantUsedID(r.ID)
}

// Mutation returns the NestMutation object of the builder.
func (nu *NestUpdate) Mutation() *NestMutation {
	return nu.mutation
}

// ClearParts clears all "parts" edges to the Part entity.
func (nu *NestUpdate) ClearParts() *NestUpdate {
	nu.mutation.ClearParts()
	return nu
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (nu *NestUpdate) RemovePartIDs(ids ...uuid.UUID) *NestUpdate {
	nu.mutation.RemovePartIDs(ids...)
	return nu
}

// RemoveParts removes "parts" edges to Part entities.
func (nu *NestUpdate) RemoveParts(p ...*Part) *NestUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemovePartIDs(ids...)
}

// ClearRemnant clears the "remnant" edge to the Remnant entity.
func (nu *NestUpdate) ClearRemnant() *NestUpdate {
	nu.mutation.ClearRemnant()
	return nu
}

// ClearRemnantUsed clears the "remnant_used" edge to the Remnant entity.
func (nu *NestUpdate) ClearRemnantUsed() *NestUpdate {
	nu.mutation.ClearRemnantUsed()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NestUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NestUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NestUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NestUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := nest.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NestUpdate) check() error {
	if v, ok := nu.mutation.Name(); ok {
		if err := nest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Nest.name": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Length(); ok {
		if err := nest.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Nest.length": %w`, err)}
		}
	}
	return nil
}

func (nu *NestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nest.Table,
			Columns: nest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: nest.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nest.FieldUpdatedAt,
		})
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nest.FieldName,
		})
	}
	if value, ok := nu.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: nest.FieldLength,
		})
	}
	if value, ok := nu.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: nest.FieldLength,
		})
	}
	if nu.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nest.PartsTable,
			Columns: nest.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: part.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedPartsIDs(); len(nodes) > 0 && !nu.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nest.PartsTable,
			Columns: nest.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nest.PartsTable,
			Columns: nest.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.RemnantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nest.RemnantTable,
			Columns: []string{nest.RemnantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemnantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nest.RemnantTable,
			Columns: []string{nest.RemnantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.RemnantUsedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nest.RemnantUsedTable,
			Columns: []string{nest.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemnantUsedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nest.RemnantUsedTable,
			Columns: []string{nest.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NestUpdateOne is the builder for updating a single Nest entity.
type NestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NestMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NestUpdateOne) SetUpdatedAt(t time.Time) *NestUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetName sets the "name" field.
func (nuo *NestUpdateOne) SetName(s string) *NestUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetLength sets the "length" field.
func (nuo *NestUpdateOne) SetLength(f float64) *NestUpdateOne {
	nuo.mutation.ResetLength()
	nuo.mutation.SetLength(f)
	return nuo
}

// AddLength adds f to the "length" field.
func (nuo *NestUpdateOne) AddLength(f float64) *NestUpdateOne {
	nuo.mutation.AddLength(f)
	return nuo
}

// AddPartIDs adds the "parts" edge to the Part entity by IDs.
func (nuo *NestUpdateOne) AddPartIDs(ids ...uuid.UUID) *NestUpdateOne {
	nuo.mutation.AddPartIDs(ids...)
	return nuo
}

// AddParts adds the "parts" edges to the Part entity.
func (nuo *NestUpdateOne) AddParts(p ...*Part) *NestUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddPartIDs(ids...)
}

// SetRemnantID sets the "remnant" edge to the Remnant entity by ID.
func (nuo *NestUpdateOne) SetRemnantID(id uuid.UUID) *NestUpdateOne {
	nuo.mutation.SetRemnantID(id)
	return nuo
}

// SetNillableRemnantID sets the "remnant" edge to the Remnant entity by ID if the given value is not nil.
func (nuo *NestUpdateOne) SetNillableRemnantID(id *uuid.UUID) *NestUpdateOne {
	if id != nil {
		nuo = nuo.SetRemnantID(*id)
	}
	return nuo
}

// SetRemnant sets the "remnant" edge to the Remnant entity.
func (nuo *NestUpdateOne) SetRemnant(r *Remnant) *NestUpdateOne {
	return nuo.SetRemnantID(r.ID)
}

// SetRemnantUsedID sets the "remnant_used" edge to the Remnant entity by ID.
func (nuo *NestUpdateOne) SetRemnantUsedID(id uuid.UUID) *NestUpdateOne {
	nuo.mutation.SetRemnantUsedID(id)
	return nuo
}

// SetNillableRemnantUsedID sets the "remnant_used" edge to the Remnant entity by ID if the given value is not nil.
func (nuo *NestUpdateOne) SetNillableRemnantUsedID(id *uuid.UUID) *NestUpdateOne {
	if id != nil {
		nuo = nuo.SetRemnantUsedID(*id)
	}
	return nuo
}

// SetRemnantUsed sets the "remnant_used" edge to the Remnant entity.
func (nuo *NestUpdateOne) SetRemnantUsed(r *Remnant) *NestUpdateOne {
	return nuo.SetRemnantUsedID(r.ID)
}

// Mutation returns the NestMutation object of the builder.
func (nuo *NestUpdateOne) Mutation() *NestMutation {
	return nuo.mutation
}

// ClearParts clears all "parts" edges to the Part entity.
func (nuo *NestUpdateOne) ClearParts() *NestUpdateOne {
	nuo.mutation.ClearParts()
	return nuo
}

// RemovePartIDs removes the "parts" edge to Part entities by IDs.
func (nuo *NestUpdateOne) RemovePartIDs(ids ...uuid.UUID) *NestUpdateOne {
	nuo.mutation.RemovePartIDs(ids...)
	return nuo
}

// RemoveParts removes "parts" edges to Part entities.
func (nuo *NestUpdateOne) RemoveParts(p ...*Part) *NestUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemovePartIDs(ids...)
}

// ClearRemnant clears the "remnant" edge to the Remnant entity.
func (nuo *NestUpdateOne) ClearRemnant() *NestUpdateOne {
	nuo.mutation.ClearRemnant()
	return nuo
}

// ClearRemnantUsed clears the "remnant_used" edge to the Remnant entity.
func (nuo *NestUpdateOne) ClearRemnantUsed() *NestUpdateOne {
	nuo.mutation.ClearRemnantUsed()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NestUpdateOne) Select(field string, fields ...string) *NestUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Nest entity.
func (nuo *NestUpdateOne) Save(ctx context.Context) (*Nest, error) {
	var (
		err  error
		node *Nest
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Nest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NestUpdateOne) SaveX(ctx context.Context) *Nest {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NestUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NestUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NestUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := nest.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NestUpdateOne) check() error {
	if v, ok := nuo.mutation.Name(); ok {
		if err := nest.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Nest.name": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Length(); ok {
		if err := nest.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Nest.length": %w`, err)}
		}
	}
	return nil
}

func (nuo *NestUpdateOne) sqlSave(ctx context.Context) (_node *Nest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nest.Table,
			Columns: nest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: nest.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Nest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nest.FieldID)
		for _, f := range fields {
			if !nest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nest.FieldUpdatedAt,
		})
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nest.FieldName,
		})
	}
	if value, ok := nuo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: nest.FieldLength,
		})
	}
	if value, ok := nuo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: nest.FieldLength,
		})
	}
	if nuo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nest.PartsTable,
			Columns: nest.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: part.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedPartsIDs(); len(nodes) > 0 && !nuo.mutation.PartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nest.PartsTable,
			Columns: nest.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.PartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   nest.PartsTable,
			Columns: nest.PartsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: part.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.RemnantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nest.RemnantTable,
			Columns: []string{nest.RemnantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemnantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nest.RemnantTable,
			Columns: []string{nest.RemnantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.RemnantUsedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nest.RemnantUsedTable,
			Columns: []string{nest.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemnantUsedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nest.RemnantUsedTable,
			Columns: []string{nest.RemnantUsedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: remnant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Nest{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
