// Code generated by ent, DO NOT EDIT.

package part

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the part type in the database.
	Label = "part"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProject holds the string denoting the project field in the database.
	FieldProject = "project"
	// FieldSection holds the string denoting the section field in the database.
	FieldSection = "section"
	// FieldPos holds the string denoting the pos field in the database.
	FieldPos = "pos"
	// FieldQuality holds the string denoting the quality field in the database.
	FieldQuality = "quality"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldThickness holds the string denoting the thickness field in the database.
	FieldThickness = "thickness"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldNested holds the string denoting the nested field in the database.
	FieldNested = "nested"
	// EdgeNests holds the string denoting the nests edge name in mutations.
	EdgeNests = "nests"
	// Table holds the table name of the part in the database.
	Table = "parts"
	// NestsTable is the table that holds the nests relation/edge. The primary key declared below.
	NestsTable = "nest_parts"
	// NestsInverseTable is the table name for the Nest entity.
	// It exists in this package in order to avoid circular dependency with the "nest" package.
	NestsInverseTable = "nests"
)

// Columns holds all SQL columns for part fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProject,
	FieldSection,
	FieldPos,
	FieldQuality,
	FieldType,
	FieldLength,
	FieldWidth,
	FieldThickness,
	FieldCount,
	FieldNested,
}

var (
	// NestsPrimaryKey and NestsColumn2 are the table columns denoting the
	// primary key for the nests relation (M2M).
	NestsPrimaryKey = []string{"nest_id", "part_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ProjectValidator is a validator for the "project" field. It is called by the builders before save.
	ProjectValidator func(string) error
	// SectionValidator is a validator for the "section" field. It is called by the builders before save.
	SectionValidator func(string) error
	// PosValidator is a validator for the "pos" field. It is called by the builders before save.
	PosValidator func(string) error
	// QualityValidator is a validator for the "quality" field. It is called by the builders before save.
	QualityValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// LengthValidator is a validator for the "length" field. It is called by the builders before save.
	LengthValidator func(float64) error
	// WidthValidator is a validator for the "width" field. It is called by the builders before save.
	WidthValidator func(float64) error
	// ThicknessValidator is a validator for the "thickness" field. It is called by the builders before save.
	ThicknessValidator func(float64) error
	// CountValidator is a validator for the "count" field. It is called by the builders before save.
	CountValidator func(int64) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
