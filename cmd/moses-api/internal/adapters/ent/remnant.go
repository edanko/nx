// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/remnant"
	"github.com/google/uuid"
)

// Remnant is the model entity for the Remnant schema.
type Remnant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Quality holds the value of the "quality" field.
	Quality string `json:"quality,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Length holds the value of the "length" field.
	Length float64 `json:"length,omitempty"`
	// Width holds the value of the "width" field.
	Width float64 `json:"width,omitempty"`
	// Thickness holds the value of the "thickness" field.
	Thickness float64 `json:"thickness,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RemnantQuery when eager-loading is set.
	Edges        RemnantEdges `json:"edges"`
	nest_remnant *uuid.UUID
}

// RemnantEdges holds the relations/edges for other nodes in the graph.
type RemnantEdges struct {
	// Nest holds the value of the nest edge.
	Nest *Nest `json:"nest,omitempty"`
	// RemnantUsed holds the value of the remnant_used edge.
	RemnantUsed []*Nest `json:"remnant_used,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NestOrErr returns the Nest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RemnantEdges) NestOrErr() (*Nest, error) {
	if e.loadedTypes[0] {
		if e.Nest == nil {
			// The edge nest was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nest.Label}
		}
		return e.Nest, nil
	}
	return nil, &NotLoadedError{edge: "nest"}
}

// RemnantUsedOrErr returns the RemnantUsed value or an error if the edge
// was not loaded in eager-loading.
func (e RemnantEdges) RemnantUsedOrErr() ([]*Nest, error) {
	if e.loadedTypes[1] {
		return e.RemnantUsed, nil
	}
	return nil, &NotLoadedError{edge: "remnant_used"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Remnant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case remnant.FieldLength, remnant.FieldWidth, remnant.FieldThickness:
			values[i] = new(sql.NullFloat64)
		case remnant.FieldName, remnant.FieldQuality, remnant.FieldType:
			values[i] = new(sql.NullString)
		case remnant.FieldCreatedAt, remnant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case remnant.FieldID:
			values[i] = new(uuid.UUID)
		case remnant.ForeignKeys[0]: // nest_remnant
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Remnant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Remnant fields.
func (r *Remnant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case remnant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case remnant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case remnant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case remnant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case remnant.FieldQuality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quality", values[i])
			} else if value.Valid {
				r.Quality = value.String
			}
		case remnant.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		case remnant.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				r.Length = value.Float64
			}
		case remnant.FieldWidth:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				r.Width = value.Float64
			}
		case remnant.FieldThickness:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field thickness", values[i])
			} else if value.Valid {
				r.Thickness = value.Float64
			}
		case remnant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field nest_remnant", values[i])
			} else if value.Valid {
				r.nest_remnant = new(uuid.UUID)
				*r.nest_remnant = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryNest queries the "nest" edge of the Remnant entity.
func (r *Remnant) QueryNest() *NestQuery {
	return (&RemnantClient{config: r.config}).QueryNest(r)
}

// QueryRemnantUsed queries the "remnant_used" edge of the Remnant entity.
func (r *Remnant) QueryRemnantUsed() *NestQuery {
	return (&RemnantClient{config: r.config}).QueryRemnantUsed(r)
}

// Update returns a builder for updating this Remnant.
// Note that you need to call Remnant.Unwrap() before calling this method if this Remnant
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Remnant) Update() *RemnantUpdateOne {
	return (&RemnantClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Remnant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Remnant) Unwrap() *Remnant {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Remnant is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Remnant) String() string {
	var builder strings.Builder
	builder.WriteString("Remnant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("quality=")
	builder.WriteString(r.Quality)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(r.Type)
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", r.Length))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", r.Width))
	builder.WriteString(", ")
	builder.WriteString("thickness=")
	builder.WriteString(fmt.Sprintf("%v", r.Thickness))
	builder.WriteByte(')')
	return builder.String()
}

// Remnants is a parsable slice of Remnant.
type Remnants []*Remnant

func (r Remnants) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
