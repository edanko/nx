// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/nest"
	"github.com/edanko/nx/cmd/moses-api/internal/adapters/ent/part"
	"github.com/google/uuid"
)

// PartCreate is the builder for creating a Part entity.
type PartCreate struct {
	config
	mutation *PartMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PartCreate) SetCreatedAt(t time.Time) *PartCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PartCreate) SetNillableCreatedAt(t *time.Time) *PartCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PartCreate) SetUpdatedAt(t time.Time) *PartCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PartCreate) SetNillableUpdatedAt(t *time.Time) *PartCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetProject sets the "project" field.
func (pc *PartCreate) SetProject(s string) *PartCreate {
	pc.mutation.SetProject(s)
	return pc
}

// SetSection sets the "section" field.
func (pc *PartCreate) SetSection(s string) *PartCreate {
	pc.mutation.SetSection(s)
	return pc
}

// SetPos sets the "pos" field.
func (pc *PartCreate) SetPos(s string) *PartCreate {
	pc.mutation.SetPos(s)
	return pc
}

// SetQuality sets the "quality" field.
func (pc *PartCreate) SetQuality(s string) *PartCreate {
	pc.mutation.SetQuality(s)
	return pc
}

// SetType sets the "type" field.
func (pc *PartCreate) SetType(s string) *PartCreate {
	pc.mutation.SetType(s)
	return pc
}

// SetLength sets the "length" field.
func (pc *PartCreate) SetLength(f float64) *PartCreate {
	pc.mutation.SetLength(f)
	return pc
}

// SetWidth sets the "width" field.
func (pc *PartCreate) SetWidth(f float64) *PartCreate {
	pc.mutation.SetWidth(f)
	return pc
}

// SetThickness sets the "thickness" field.
func (pc *PartCreate) SetThickness(f float64) *PartCreate {
	pc.mutation.SetThickness(f)
	return pc
}

// SetCount sets the "count" field.
func (pc *PartCreate) SetCount(i int64) *PartCreate {
	pc.mutation.SetCount(i)
	return pc
}

// SetNested sets the "nested" field.
func (pc *PartCreate) SetNested(i int64) *PartCreate {
	pc.mutation.SetNested(i)
	return pc
}

// SetID sets the "id" field.
func (pc *PartCreate) SetID(u uuid.UUID) *PartCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PartCreate) SetNillableID(u *uuid.UUID) *PartCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddNestIDs adds the "nests" edge to the Nest entity by IDs.
func (pc *PartCreate) AddNestIDs(ids ...uuid.UUID) *PartCreate {
	pc.mutation.AddNestIDs(ids...)
	return pc
}

// AddNests adds the "nests" edges to the Nest entity.
func (pc *PartCreate) AddNests(n ...*Nest) *PartCreate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pc.AddNestIDs(ids...)
}

// Mutation returns the PartMutation object of the builder.
func (pc *PartCreate) Mutation() *PartMutation {
	return pc.mutation
}

// Save creates the Part in the database.
func (pc *PartCreate) Save(ctx context.Context) (*Part, error) {
	var (
		err  error
		node *Part
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Part)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PartMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartCreate) SaveX(ctx context.Context) *Part {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PartCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PartCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PartCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := part.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := part.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := part.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PartCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Part.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Part.updated_at"`)}
	}
	if _, ok := pc.mutation.Project(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required field "Part.project"`)}
	}
	if v, ok := pc.mutation.Project(); ok {
		if err := part.ProjectValidator(v); err != nil {
			return &ValidationError{Name: "project", err: fmt.Errorf(`ent: validator failed for field "Part.project": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Section(); !ok {
		return &ValidationError{Name: "section", err: errors.New(`ent: missing required field "Part.section"`)}
	}
	if v, ok := pc.mutation.Section(); ok {
		if err := part.SectionValidator(v); err != nil {
			return &ValidationError{Name: "section", err: fmt.Errorf(`ent: validator failed for field "Part.section": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Pos(); !ok {
		return &ValidationError{Name: "pos", err: errors.New(`ent: missing required field "Part.pos"`)}
	}
	if v, ok := pc.mutation.Pos(); ok {
		if err := part.PosValidator(v); err != nil {
			return &ValidationError{Name: "pos", err: fmt.Errorf(`ent: validator failed for field "Part.pos": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Quality(); !ok {
		return &ValidationError{Name: "quality", err: errors.New(`ent: missing required field "Part.quality"`)}
	}
	if v, ok := pc.mutation.Quality(); ok {
		if err := part.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Part.quality": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Part.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := part.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Part.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`ent: missing required field "Part.length"`)}
	}
	if v, ok := pc.mutation.Length(); ok {
		if err := part.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Part.length": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Part.width"`)}
	}
	if v, ok := pc.mutation.Width(); ok {
		if err := part.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Part.width": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Thickness(); !ok {
		return &ValidationError{Name: "thickness", err: errors.New(`ent: missing required field "Part.thickness"`)}
	}
	if v, ok := pc.mutation.Thickness(); ok {
		if err := part.ThicknessValidator(v); err != nil {
			return &ValidationError{Name: "thickness", err: fmt.Errorf(`ent: validator failed for field "Part.thickness": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "Part.count"`)}
	}
	if v, ok := pc.mutation.Count(); ok {
		if err := part.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "Part.count": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Nested(); !ok {
		return &ValidationError{Name: "nested", err: errors.New(`ent: missing required field "Part.nested"`)}
	}
	return nil
}

func (pc *PartCreate) sqlSave(ctx context.Context) (*Part, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *PartCreate) createSpec() (*Part, *sqlgraph.CreateSpec) {
	var (
		_node = &Part{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: part.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: part.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: part.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: part.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Project(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldProject,
		})
		_node.Project = value
	}
	if value, ok := pc.mutation.Section(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldSection,
		})
		_node.Section = value
	}
	if value, ok := pc.mutation.Pos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldPos,
		})
		_node.Pos = value
	}
	if value, ok := pc.mutation.Quality(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldQuality,
		})
		_node.Quality = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: part.FieldType,
		})
		_node.Type = value
	}
	if value, ok := pc.mutation.Length(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldLength,
		})
		_node.Length = value
	}
	if value, ok := pc.mutation.Width(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldWidth,
		})
		_node.Width = value
	}
	if value, ok := pc.mutation.Thickness(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: part.FieldThickness,
		})
		_node.Thickness = value
	}
	if value, ok := pc.mutation.Count(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldCount,
		})
		_node.Count = value
	}
	if value, ok := pc.mutation.Nested(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: part.FieldNested,
		})
		_node.Nested = value
	}
	if nodes := pc.mutation.NestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   part.NestsTable,
			Columns: part.NestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: nest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartCreateBulk is the builder for creating many Part entities in bulk.
type PartCreateBulk struct {
	config
	builders []*PartCreate
}

// Save creates the Part entities in the database.
func (pcb *PartCreateBulk) Save(ctx context.Context) ([]*Part, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Part, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PartCreateBulk) SaveX(ctx context.Context) []*Part {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PartCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PartCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
