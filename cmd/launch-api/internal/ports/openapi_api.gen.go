// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Applicants
	// (GET /applicants)
	ListApplicants(w http.ResponseWriter, r *http.Request, params ListApplicantsParams)
	// Create New Applicant
	// (POST /applicants)
	CreateApplicant(w http.ResponseWriter, r *http.Request)
	// Delete Applicant by ID
	// (DELETE /applicants/{id})
	DeleteApplicant(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get Applicant by ID
	// (GET /applicants/{id})
	GetApplicant(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Applicant Description
	// (POST /applicants/{id}/changeDescription)
	ChangeApplicantDescription(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Applicant Name
	// (POST /applicants/{id}/changeName)
	ChangeApplicantName(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Applicant Draft
	// (POST /applicants/{id}/makeDraft)
	MakeApplicantDraft(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Applicant Published
	// (POST /applicants/{id}/makePublished)
	MakeApplicantPublished(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List Kinds
	// (GET /kinds)
	ListKinds(w http.ResponseWriter, r *http.Request, params ListKindsParams)
	// Create New Kind
	// (POST /kinds)
	CreateKind(w http.ResponseWriter, r *http.Request)
	// Delete Kind by ID
	// (DELETE /kinds/{id})
	DeleteKind(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get Kind by ID
	// (GET /kinds/{id})
	GetKind(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Kind Description
	// (POST /kinds/{id}/changeDescription)
	ChangeKindDescription(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Kind Name
	// (POST /kinds/{id}/changeName)
	ChangeKindName(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Kind Draft
	// (POST /kinds/{id}/makeDraft)
	MakeKindDraft(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Kind Published
	// (POST /kinds/{id}/makePublished)
	MakeKindPublished(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List Launches
	// (GET /launches)
	ListLaunches(w http.ResponseWriter, r *http.Request, params ListLaunchesParams)
	// Create New Launch
	// (POST /launches)
	CreateLaunch(w http.ResponseWriter, r *http.Request)
	// Delete Launch by ID
	// (DELETE /launches/{id})
	DeleteLaunch(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get Launch by ID
	// (GET /launches/{id})
	GetLaunch(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Launch Description
	// (POST /launches/{id}/changeDescription)
	ChangeLaunchDescription(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Launch Name
	// (POST /launches/{id}/changeName)
	ChangeLaunchName(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Launch Draft
	// (POST /launches/{id}/makeDraft)
	MakeLaunchDraft(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Launch Published
	// (POST /launches/{id}/makePublished)
	MakeLaunchPublished(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List Orders
	// (GET /orders)
	ListOrders(w http.ResponseWriter, r *http.Request, params ListOrdersParams)
	// Create New Order
	// (POST /orders)
	CreateOrder(w http.ResponseWriter, r *http.Request)
	// Delete Order by ID
	// (DELETE /orders/{id})
	DeleteOrder(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get Order by ID
	// (GET /orders/{id})
	GetOrder(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Order Description
	// (POST /orders/{id}/changeDescription)
	ChangeOrderDescription(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change Order Name
	// (POST /orders/{id}/changeName)
	ChangeOrderName(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Order Draft
	// (POST /orders/{id}/makeDraft)
	MakeOrderDraft(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make Order Published
	// (POST /orders/{id}/makePublished)
	MakeOrderPublished(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List Users
	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
	// Create New User
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete User by ID
	// (DELETE /users/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get User by ID
	// (GET /users/{id})
	GetUser(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change User Description
	// (POST /users/{id}/changeDescription)
	ChangeUserDescription(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Change User Name
	// (POST /users/{id}/changeName)
	ChangeUserName(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make User Draft
	// (POST /users/{id}/makeDraft)
	MakeUserDraft(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Make User Published
	// (POST /users/{id}/makePublished)
	MakeUserPublished(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ListApplicants operation middleware
func (siw *ServerInterfaceWrapper) ListApplicants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApplicantsParams

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListApplicants(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateApplicant operation middleware
func (siw *ServerInterfaceWrapper) CreateApplicant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateApplicant(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteApplicant operation middleware
func (siw *ServerInterfaceWrapper) DeleteApplicant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApplicant(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApplicant operation middleware
func (siw *ServerInterfaceWrapper) GetApplicant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApplicant(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeApplicantDescription operation middleware
func (siw *ServerInterfaceWrapper) ChangeApplicantDescription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeApplicantDescription(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeApplicantName operation middleware
func (siw *ServerInterfaceWrapper) ChangeApplicantName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeApplicantName(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeApplicantDraft operation middleware
func (siw *ServerInterfaceWrapper) MakeApplicantDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeApplicantDraft(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeApplicantPublished operation middleware
func (siw *ServerInterfaceWrapper) MakeApplicantPublished(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeApplicantPublished(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListKinds operation middleware
func (siw *ServerInterfaceWrapper) ListKinds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListKindsParams

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListKinds(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateKind operation middleware
func (siw *ServerInterfaceWrapper) CreateKind(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateKind(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteKind operation middleware
func (siw *ServerInterfaceWrapper) DeleteKind(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteKind(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetKind operation middleware
func (siw *ServerInterfaceWrapper) GetKind(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKind(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeKindDescription operation middleware
func (siw *ServerInterfaceWrapper) ChangeKindDescription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeKindDescription(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeKindName operation middleware
func (siw *ServerInterfaceWrapper) ChangeKindName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeKindName(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeKindDraft operation middleware
func (siw *ServerInterfaceWrapper) MakeKindDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeKindDraft(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeKindPublished operation middleware
func (siw *ServerInterfaceWrapper) MakeKindPublished(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeKindPublished(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListLaunches operation middleware
func (siw *ServerInterfaceWrapper) ListLaunches(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLaunchesParams

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLaunches(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateLaunch operation middleware
func (siw *ServerInterfaceWrapper) CreateLaunch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLaunch(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteLaunch operation middleware
func (siw *ServerInterfaceWrapper) DeleteLaunch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLaunch(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLaunch operation middleware
func (siw *ServerInterfaceWrapper) GetLaunch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLaunch(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeLaunchDescription operation middleware
func (siw *ServerInterfaceWrapper) ChangeLaunchDescription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeLaunchDescription(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeLaunchName operation middleware
func (siw *ServerInterfaceWrapper) ChangeLaunchName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeLaunchName(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeLaunchDraft operation middleware
func (siw *ServerInterfaceWrapper) MakeLaunchDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeLaunchDraft(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeLaunchPublished operation middleware
func (siw *ServerInterfaceWrapper) MakeLaunchPublished(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeLaunchPublished(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListOrders operation middleware
func (siw *ServerInterfaceWrapper) ListOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOrdersParams

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListOrders(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrder(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrder(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeOrderDescription operation middleware
func (siw *ServerInterfaceWrapper) ChangeOrderDescription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeOrderDescription(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeOrderName operation middleware
func (siw *ServerInterfaceWrapper) ChangeOrderName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeOrderName(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeOrderDraft operation middleware
func (siw *ServerInterfaceWrapper) MakeOrderDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeOrderDraft(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeOrderPublished operation middleware
func (siw *ServerInterfaceWrapper) MakeOrderPublished(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeOrderPublished(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "cursor" -------------
	if paramValue := r.URL.Query().Get("cursor"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeUserDescription operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserDescription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeUserDescription(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeUserName operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeUserName(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeUserDraft operation middleware
func (siw *ServerInterfaceWrapper) MakeUserDraft(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeUserDraft(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// MakeUserPublished operation middleware
func (siw *ServerInterfaceWrapper) MakeUserPublished(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MakeUserPublished(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/applicants", wrapper.ListApplicants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/applicants", wrapper.CreateApplicant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/applicants/{id}", wrapper.DeleteApplicant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/applicants/{id}", wrapper.GetApplicant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/applicants/{id}/changeDescription", wrapper.ChangeApplicantDescription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/applicants/{id}/changeName", wrapper.ChangeApplicantName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/applicants/{id}/makeDraft", wrapper.MakeApplicantDraft)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/applicants/{id}/makePublished", wrapper.MakeApplicantPublished)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/kinds", wrapper.ListKinds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/kinds", wrapper.CreateKind)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/kinds/{id}", wrapper.DeleteKind)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/kinds/{id}", wrapper.GetKind)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/kinds/{id}/changeDescription", wrapper.ChangeKindDescription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/kinds/{id}/changeName", wrapper.ChangeKindName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/kinds/{id}/makeDraft", wrapper.MakeKindDraft)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/kinds/{id}/makePublished", wrapper.MakeKindPublished)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/launches", wrapper.ListLaunches)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/launches", wrapper.CreateLaunch)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/launches/{id}", wrapper.DeleteLaunch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/launches/{id}", wrapper.GetLaunch)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/launches/{id}/changeDescription", wrapper.ChangeLaunchDescription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/launches/{id}/changeName", wrapper.ChangeLaunchName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/launches/{id}/makeDraft", wrapper.MakeLaunchDraft)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/launches/{id}/makePublished", wrapper.MakeLaunchPublished)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/orders", wrapper.ListOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders", wrapper.CreateOrder)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/orders/{id}", wrapper.DeleteOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/orders/{id}", wrapper.GetOrder)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders/{id}/changeDescription", wrapper.ChangeOrderDescription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders/{id}/changeName", wrapper.ChangeOrderName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders/{id}/makeDraft", wrapper.MakeOrderDraft)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders/{id}/makePublished", wrapper.MakeOrderPublished)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}/changeDescription", wrapper.ChangeUserDescription)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}/changeName", wrapper.ChangeUserName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}/makeDraft", wrapper.MakeUserDraft)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{id}/makePublished", wrapper.MakeUserPublished)
	})

	return r
}
