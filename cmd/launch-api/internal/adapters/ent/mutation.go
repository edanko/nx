// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/edanko/nx/cmd/launch-api/internal/adapters/ent/applicant"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/ent/kind"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/ent/launch"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/ent/order"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/ent/predicate"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApplicant = "Applicant"
	TypeKind      = "Kind"
	TypeLaunch    = "Launch"
	TypeOrder     = "Order"
	TypeUser      = "User"
)

// ApplicantMutation represents an operation that mutates the Applicant nodes in the graph.
type ApplicantMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	name            *string
	clearedFields   map[string]struct{}
	launches        map[uuid.UUID]struct{}
	removedlaunches map[uuid.UUID]struct{}
	clearedlaunches bool
	done            bool
	oldValue        func(context.Context) (*Applicant, error)
	predicates      []predicate.Applicant
}

var _ ent.Mutation = (*ApplicantMutation)(nil)

// applicantOption allows management of the mutation configuration using functional options.
type applicantOption func(*ApplicantMutation)

// newApplicantMutation creates new mutation for the Applicant entity.
func newApplicantMutation(c config, op Op, opts ...applicantOption) *ApplicantMutation {
	m := &ApplicantMutation{
		config:        c,
		op:            op,
		typ:           TypeApplicant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicantID sets the ID field of the mutation.
func withApplicantID(id uuid.UUID) applicantOption {
	return func(m *ApplicantMutation) {
		var (
			err   error
			once  sync.Once
			value *Applicant
		)
		m.oldValue = func(ctx context.Context) (*Applicant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Applicant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplicant sets the old Applicant of the mutation.
func withApplicant(node *Applicant) applicantOption {
	return func(m *ApplicantMutation) {
		m.oldValue = func(context.Context) (*Applicant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Applicant entities.
func (m *ApplicantMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicantMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicantMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Applicant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ApplicantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ApplicantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Applicant entity.
// If the Applicant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ApplicantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ApplicantMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ApplicantMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Applicant entity.
// If the Applicant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicantMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ApplicantMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *ApplicantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ApplicantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Applicant entity.
// If the Applicant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicantMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ApplicantMutation) ResetName() {
	m.name = nil
}

// AddLaunchIDs adds the "launches" edge to the Launch entity by ids.
func (m *ApplicantMutation) AddLaunchIDs(ids ...uuid.UUID) {
	if m.launches == nil {
		m.launches = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.launches[ids[i]] = struct{}{}
	}
}

// ClearLaunches clears the "launches" edge to the Launch entity.
func (m *ApplicantMutation) ClearLaunches() {
	m.clearedlaunches = true
}

// LaunchesCleared reports if the "launches" edge to the Launch entity was cleared.
func (m *ApplicantMutation) LaunchesCleared() bool {
	return m.clearedlaunches
}

// RemoveLaunchIDs removes the "launches" edge to the Launch entity by IDs.
func (m *ApplicantMutation) RemoveLaunchIDs(ids ...uuid.UUID) {
	if m.removedlaunches == nil {
		m.removedlaunches = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.launches, ids[i])
		m.removedlaunches[ids[i]] = struct{}{}
	}
}

// RemovedLaunches returns the removed IDs of the "launches" edge to the Launch entity.
func (m *ApplicantMutation) RemovedLaunchesIDs() (ids []uuid.UUID) {
	for id := range m.removedlaunches {
		ids = append(ids, id)
	}
	return
}

// LaunchesIDs returns the "launches" edge IDs in the mutation.
func (m *ApplicantMutation) LaunchesIDs() (ids []uuid.UUID) {
	for id := range m.launches {
		ids = append(ids, id)
	}
	return
}

// ResetLaunches resets all changes to the "launches" edge.
func (m *ApplicantMutation) ResetLaunches() {
	m.launches = nil
	m.clearedlaunches = false
	m.removedlaunches = nil
}

// Where appends a list predicates to the ApplicantMutation builder.
func (m *ApplicantMutation) Where(ps ...predicate.Applicant) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ApplicantMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Applicant).
func (m *ApplicantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicantMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, applicant.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, applicant.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, applicant.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case applicant.FieldCreatedAt:
		return m.CreatedAt()
	case applicant.FieldUpdatedAt:
		return m.UpdatedAt()
	case applicant.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case applicant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case applicant.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case applicant.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Applicant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case applicant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case applicant.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case applicant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Applicant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Applicant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicantMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicantMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Applicant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicantMutation) ResetField(name string) error {
	switch name {
	case applicant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case applicant.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case applicant.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Applicant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicantMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.launches != nil {
		edges = append(edges, applicant.EdgeLaunches)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case applicant.EdgeLaunches:
		ids := make([]ent.Value, 0, len(m.launches))
		for id := range m.launches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlaunches != nil {
		edges = append(edges, applicant.EdgeLaunches)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case applicant.EdgeLaunches:
		ids := make([]ent.Value, 0, len(m.removedlaunches))
		for id := range m.removedlaunches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlaunches {
		edges = append(edges, applicant.EdgeLaunches)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicantMutation) EdgeCleared(name string) bool {
	switch name {
	case applicant.EdgeLaunches:
		return m.clearedlaunches
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicantMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Applicant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicantMutation) ResetEdge(name string) error {
	switch name {
	case applicant.EdgeLaunches:
		m.ResetLaunches()
		return nil
	}
	return fmt.Errorf("unknown Applicant edge %s", name)
}

// KindMutation represents an operation that mutates the Kind nodes in the graph.
type KindMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	name            *string
	description     *string
	status          *kind.Status
	clearedFields   map[string]struct{}
	launches        map[uuid.UUID]struct{}
	removedlaunches map[uuid.UUID]struct{}
	clearedlaunches bool
	done            bool
	oldValue        func(context.Context) (*Kind, error)
	predicates      []predicate.Kind
}

var _ ent.Mutation = (*KindMutation)(nil)

// kindOption allows management of the mutation configuration using functional options.
type kindOption func(*KindMutation)

// newKindMutation creates new mutation for the Kind entity.
func newKindMutation(c config, op Op, opts ...kindOption) *KindMutation {
	m := &KindMutation{
		config:        c,
		op:            op,
		typ:           TypeKind,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKindID sets the ID field of the mutation.
func withKindID(id uuid.UUID) kindOption {
	return func(m *KindMutation) {
		var (
			err   error
			once  sync.Once
			value *Kind
		)
		m.oldValue = func(ctx context.Context) (*Kind, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Kind.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKind sets the old Kind of the mutation.
func withKind(node *Kind) kindOption {
	return func(m *KindMutation) {
		m.oldValue = func(context.Context) (*Kind, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KindMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KindMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Kind entities.
func (m *KindMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KindMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KindMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Kind.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *KindMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *KindMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Kind entity.
// If the Kind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KindMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *KindMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *KindMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *KindMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Kind entity.
// If the Kind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KindMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *KindMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *KindMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *KindMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Kind entity.
// If the Kind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KindMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *KindMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *KindMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *KindMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Kind entity.
// If the Kind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KindMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *KindMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[kind.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *KindMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[kind.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *KindMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, kind.FieldDescription)
}

// SetStatus sets the "status" field.
func (m *KindMutation) SetStatus(k kind.Status) {
	m.status = &k
}

// Status returns the value of the "status" field in the mutation.
func (m *KindMutation) Status() (r kind.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Kind entity.
// If the Kind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KindMutation) OldStatus(ctx context.Context) (v kind.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *KindMutation) ResetStatus() {
	m.status = nil
}

// AddLaunchIDs adds the "launches" edge to the Launch entity by ids.
func (m *KindMutation) AddLaunchIDs(ids ...uuid.UUID) {
	if m.launches == nil {
		m.launches = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.launches[ids[i]] = struct{}{}
	}
}

// ClearLaunches clears the "launches" edge to the Launch entity.
func (m *KindMutation) ClearLaunches() {
	m.clearedlaunches = true
}

// LaunchesCleared reports if the "launches" edge to the Launch entity was cleared.
func (m *KindMutation) LaunchesCleared() bool {
	return m.clearedlaunches
}

// RemoveLaunchIDs removes the "launches" edge to the Launch entity by IDs.
func (m *KindMutation) RemoveLaunchIDs(ids ...uuid.UUID) {
	if m.removedlaunches == nil {
		m.removedlaunches = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.launches, ids[i])
		m.removedlaunches[ids[i]] = struct{}{}
	}
}

// RemovedLaunches returns the removed IDs of the "launches" edge to the Launch entity.
func (m *KindMutation) RemovedLaunchesIDs() (ids []uuid.UUID) {
	for id := range m.removedlaunches {
		ids = append(ids, id)
	}
	return
}

// LaunchesIDs returns the "launches" edge IDs in the mutation.
func (m *KindMutation) LaunchesIDs() (ids []uuid.UUID) {
	for id := range m.launches {
		ids = append(ids, id)
	}
	return
}

// ResetLaunches resets all changes to the "launches" edge.
func (m *KindMutation) ResetLaunches() {
	m.launches = nil
	m.clearedlaunches = false
	m.removedlaunches = nil
}

// Where appends a list predicates to the KindMutation builder.
func (m *KindMutation) Where(ps ...predicate.Kind) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *KindMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Kind).
func (m *KindMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KindMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, kind.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, kind.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, kind.FieldName)
	}
	if m.description != nil {
		fields = append(fields, kind.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, kind.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KindMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case kind.FieldCreatedAt:
		return m.CreatedAt()
	case kind.FieldUpdatedAt:
		return m.UpdatedAt()
	case kind.FieldName:
		return m.Name()
	case kind.FieldDescription:
		return m.Description()
	case kind.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KindMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case kind.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case kind.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case kind.FieldName:
		return m.OldName(ctx)
	case kind.FieldDescription:
		return m.OldDescription(ctx)
	case kind.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Kind field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KindMutation) SetField(name string, value ent.Value) error {
	switch name {
	case kind.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case kind.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case kind.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case kind.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case kind.FieldStatus:
		v, ok := value.(kind.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Kind field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KindMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KindMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KindMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Kind numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KindMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(kind.FieldDescription) {
		fields = append(fields, kind.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KindMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KindMutation) ClearField(name string) error {
	switch name {
	case kind.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Kind nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KindMutation) ResetField(name string) error {
	switch name {
	case kind.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case kind.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case kind.FieldName:
		m.ResetName()
		return nil
	case kind.FieldDescription:
		m.ResetDescription()
		return nil
	case kind.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Kind field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KindMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.launches != nil {
		edges = append(edges, kind.EdgeLaunches)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KindMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case kind.EdgeLaunches:
		ids := make([]ent.Value, 0, len(m.launches))
		for id := range m.launches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KindMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlaunches != nil {
		edges = append(edges, kind.EdgeLaunches)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KindMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case kind.EdgeLaunches:
		ids := make([]ent.Value, 0, len(m.removedlaunches))
		for id := range m.removedlaunches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KindMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlaunches {
		edges = append(edges, kind.EdgeLaunches)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KindMutation) EdgeCleared(name string) bool {
	switch name {
	case kind.EdgeLaunches:
		return m.clearedlaunches
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KindMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Kind unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KindMutation) ResetEdge(name string) error {
	switch name {
	case kind.EdgeLaunches:
		m.ResetLaunches()
		return nil
	}
	return fmt.Errorf("unknown Kind edge %s", name)
}

// LaunchMutation represents an operation that mutates the Launch nodes in the graph.
type LaunchMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *time.Time
	updated_at       *time.Time
	status           *launch.Status
	reason           *string
	description      *string
	clearedFields    map[string]struct{}
	_order           *uuid.UUID
	cleared_order    bool
	kind             *uuid.UUID
	clearedkind      bool
	applicant        *uuid.UUID
	clearedapplicant bool
	done             bool
	oldValue         func(context.Context) (*Launch, error)
	predicates       []predicate.Launch
}

var _ ent.Mutation = (*LaunchMutation)(nil)

// launchOption allows management of the mutation configuration using functional options.
type launchOption func(*LaunchMutation)

// newLaunchMutation creates new mutation for the Launch entity.
func newLaunchMutation(c config, op Op, opts ...launchOption) *LaunchMutation {
	m := &LaunchMutation{
		config:        c,
		op:            op,
		typ:           TypeLaunch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLaunchID sets the ID field of the mutation.
func withLaunchID(id uuid.UUID) launchOption {
	return func(m *LaunchMutation) {
		var (
			err   error
			once  sync.Once
			value *Launch
		)
		m.oldValue = func(ctx context.Context) (*Launch, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Launch.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLaunch sets the old Launch of the mutation.
func withLaunch(node *Launch) launchOption {
	return func(m *LaunchMutation) {
		m.oldValue = func(context.Context) (*Launch, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LaunchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LaunchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Launch entities.
func (m *LaunchMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LaunchMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LaunchMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Launch.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *LaunchMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LaunchMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Launch entity.
// If the Launch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LaunchMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LaunchMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LaunchMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Launch entity.
// If the Launch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LaunchMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *LaunchMutation) SetStatus(l launch.Status) {
	m.status = &l
}

// Status returns the value of the "status" field in the mutation.
func (m *LaunchMutation) Status() (r launch.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Launch entity.
// If the Launch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchMutation) OldStatus(ctx context.Context) (v launch.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *LaunchMutation) ResetStatus() {
	m.status = nil
}

// SetReason sets the "reason" field.
func (m *LaunchMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *LaunchMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the Launch entity.
// If the Launch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *LaunchMutation) ResetReason() {
	m.reason = nil
}

// SetDescription sets the "description" field.
func (m *LaunchMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *LaunchMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Launch entity.
// If the Launch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *LaunchMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[launch.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *LaunchMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[launch.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *LaunchMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, launch.FieldDescription)
}

// SetOrderID sets the "order" edge to the Order entity by id.
func (m *LaunchMutation) SetOrderID(id uuid.UUID) {
	m._order = &id
}

// ClearOrder clears the "order" edge to the Order entity.
func (m *LaunchMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the Order entity was cleared.
func (m *LaunchMutation) OrderCleared() bool {
	return m.cleared_order
}

// OrderID returns the "order" edge ID in the mutation.
func (m *LaunchMutation) OrderID() (id uuid.UUID, exists bool) {
	if m._order != nil {
		return *m._order, true
	}
	return
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *LaunchMutation) OrderIDs() (ids []uuid.UUID) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *LaunchMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// SetKindID sets the "kind" edge to the Kind entity by id.
func (m *LaunchMutation) SetKindID(id uuid.UUID) {
	m.kind = &id
}

// ClearKind clears the "kind" edge to the Kind entity.
func (m *LaunchMutation) ClearKind() {
	m.clearedkind = true
}

// KindCleared reports if the "kind" edge to the Kind entity was cleared.
func (m *LaunchMutation) KindCleared() bool {
	return m.clearedkind
}

// KindID returns the "kind" edge ID in the mutation.
func (m *LaunchMutation) KindID() (id uuid.UUID, exists bool) {
	if m.kind != nil {
		return *m.kind, true
	}
	return
}

// KindIDs returns the "kind" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// KindID instead. It exists only for internal usage by the builders.
func (m *LaunchMutation) KindIDs() (ids []uuid.UUID) {
	if id := m.kind; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetKind resets all changes to the "kind" edge.
func (m *LaunchMutation) ResetKind() {
	m.kind = nil
	m.clearedkind = false
}

// SetApplicantID sets the "applicant" edge to the Applicant entity by id.
func (m *LaunchMutation) SetApplicantID(id uuid.UUID) {
	m.applicant = &id
}

// ClearApplicant clears the "applicant" edge to the Applicant entity.
func (m *LaunchMutation) ClearApplicant() {
	m.clearedapplicant = true
}

// ApplicantCleared reports if the "applicant" edge to the Applicant entity was cleared.
func (m *LaunchMutation) ApplicantCleared() bool {
	return m.clearedapplicant
}

// ApplicantID returns the "applicant" edge ID in the mutation.
func (m *LaunchMutation) ApplicantID() (id uuid.UUID, exists bool) {
	if m.applicant != nil {
		return *m.applicant, true
	}
	return
}

// ApplicantIDs returns the "applicant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicantID instead. It exists only for internal usage by the builders.
func (m *LaunchMutation) ApplicantIDs() (ids []uuid.UUID) {
	if id := m.applicant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplicant resets all changes to the "applicant" edge.
func (m *LaunchMutation) ResetApplicant() {
	m.applicant = nil
	m.clearedapplicant = false
}

// Where appends a list predicates to the LaunchMutation builder.
func (m *LaunchMutation) Where(ps ...predicate.Launch) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LaunchMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Launch).
func (m *LaunchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LaunchMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, launch.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, launch.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, launch.FieldStatus)
	}
	if m.reason != nil {
		fields = append(fields, launch.FieldReason)
	}
	if m.description != nil {
		fields = append(fields, launch.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LaunchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case launch.FieldCreatedAt:
		return m.CreatedAt()
	case launch.FieldUpdatedAt:
		return m.UpdatedAt()
	case launch.FieldStatus:
		return m.Status()
	case launch.FieldReason:
		return m.Reason()
	case launch.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LaunchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case launch.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case launch.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case launch.FieldStatus:
		return m.OldStatus(ctx)
	case launch.FieldReason:
		return m.OldReason(ctx)
	case launch.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Launch field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaunchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case launch.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case launch.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case launch.FieldStatus:
		v, ok := value.(launch.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case launch.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case launch.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Launch field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LaunchMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LaunchMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaunchMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Launch numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LaunchMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(launch.FieldDescription) {
		fields = append(fields, launch.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LaunchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LaunchMutation) ClearField(name string) error {
	switch name {
	case launch.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Launch nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LaunchMutation) ResetField(name string) error {
	switch name {
	case launch.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case launch.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case launch.FieldStatus:
		m.ResetStatus()
		return nil
	case launch.FieldReason:
		m.ResetReason()
		return nil
	case launch.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Launch field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LaunchMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._order != nil {
		edges = append(edges, launch.EdgeOrder)
	}
	if m.kind != nil {
		edges = append(edges, launch.EdgeKind)
	}
	if m.applicant != nil {
		edges = append(edges, launch.EdgeApplicant)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LaunchMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case launch.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	case launch.EdgeKind:
		if id := m.kind; id != nil {
			return []ent.Value{*id}
		}
	case launch.EdgeApplicant:
		if id := m.applicant; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LaunchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LaunchMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LaunchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_order {
		edges = append(edges, launch.EdgeOrder)
	}
	if m.clearedkind {
		edges = append(edges, launch.EdgeKind)
	}
	if m.clearedapplicant {
		edges = append(edges, launch.EdgeApplicant)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LaunchMutation) EdgeCleared(name string) bool {
	switch name {
	case launch.EdgeOrder:
		return m.cleared_order
	case launch.EdgeKind:
		return m.clearedkind
	case launch.EdgeApplicant:
		return m.clearedapplicant
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LaunchMutation) ClearEdge(name string) error {
	switch name {
	case launch.EdgeOrder:
		m.ClearOrder()
		return nil
	case launch.EdgeKind:
		m.ClearKind()
		return nil
	case launch.EdgeApplicant:
		m.ClearApplicant()
		return nil
	}
	return fmt.Errorf("unknown Launch unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LaunchMutation) ResetEdge(name string) error {
	switch name {
	case launch.EdgeOrder:
		m.ResetOrder()
		return nil
	case launch.EdgeKind:
		m.ResetKind()
		return nil
	case launch.EdgeApplicant:
		m.ResetApplicant()
		return nil
	}
	return fmt.Errorf("unknown Launch edge %s", name)
}

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	name            *string
	description     *string
	status          *order.Status
	clearedFields   map[string]struct{}
	launches        map[uuid.UUID]struct{}
	removedlaunches map[uuid.UUID]struct{}
	clearedlaunches bool
	done            bool
	oldValue        func(context.Context) (*Order, error)
	predicates      []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id uuid.UUID) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Order entities.
func (m *OrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *OrderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrderMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *OrderMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OrderMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *OrderMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[order.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *OrderMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[order.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *OrderMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, order.FieldDescription)
}

// SetStatus sets the "status" field.
func (m *OrderMutation) SetStatus(o order.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderMutation) Status() (r order.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStatus(ctx context.Context) (v order.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderMutation) ResetStatus() {
	m.status = nil
}

// AddLaunchIDs adds the "launches" edge to the Launch entity by ids.
func (m *OrderMutation) AddLaunchIDs(ids ...uuid.UUID) {
	if m.launches == nil {
		m.launches = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.launches[ids[i]] = struct{}{}
	}
}

// ClearLaunches clears the "launches" edge to the Launch entity.
func (m *OrderMutation) ClearLaunches() {
	m.clearedlaunches = true
}

// LaunchesCleared reports if the "launches" edge to the Launch entity was cleared.
func (m *OrderMutation) LaunchesCleared() bool {
	return m.clearedlaunches
}

// RemoveLaunchIDs removes the "launches" edge to the Launch entity by IDs.
func (m *OrderMutation) RemoveLaunchIDs(ids ...uuid.UUID) {
	if m.removedlaunches == nil {
		m.removedlaunches = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.launches, ids[i])
		m.removedlaunches[ids[i]] = struct{}{}
	}
}

// RemovedLaunches returns the removed IDs of the "launches" edge to the Launch entity.
func (m *OrderMutation) RemovedLaunchesIDs() (ids []uuid.UUID) {
	for id := range m.removedlaunches {
		ids = append(ids, id)
	}
	return
}

// LaunchesIDs returns the "launches" edge IDs in the mutation.
func (m *OrderMutation) LaunchesIDs() (ids []uuid.UUID) {
	for id := range m.launches {
		ids = append(ids, id)
	}
	return
}

// ResetLaunches resets all changes to the "launches" edge.
func (m *OrderMutation) ResetLaunches() {
	m.launches = nil
	m.clearedlaunches = false
	m.removedlaunches = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, order.FieldName)
	}
	if m.description != nil {
		fields = append(fields, order.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, order.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreatedAt:
		return m.CreatedAt()
	case order.FieldUpdatedAt:
		return m.UpdatedAt()
	case order.FieldName:
		return m.Name()
	case order.FieldDescription:
		return m.Description()
	case order.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case order.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case order.FieldName:
		return m.OldName(ctx)
	case order.FieldDescription:
		return m.OldDescription(ctx)
	case order.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case order.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case order.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case order.FieldStatus:
		v, ok := value.(order.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldDescription) {
		fields = append(fields, order.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case order.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case order.FieldName:
		m.ResetName()
		return nil
	case order.FieldDescription:
		m.ResetDescription()
		return nil
	case order.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.launches != nil {
		edges = append(edges, order.EdgeLaunches)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeLaunches:
		ids := make([]ent.Value, 0, len(m.launches))
		for id := range m.launches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlaunches != nil {
		edges = append(edges, order.EdgeLaunches)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeLaunches:
		ids := make([]ent.Value, 0, len(m.removedlaunches))
		for id := range m.removedlaunches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlaunches {
		edges = append(edges, order.EdgeLaunches)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	switch name {
	case order.EdgeLaunches:
		return m.clearedlaunches
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	switch name {
	case order.EdgeLaunches:
		m.ResetLaunches()
		return nil
	}
	return fmt.Errorf("unknown Order edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
