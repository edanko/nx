// Code generated by entc, DO NOT EDIT.

package launch

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the launch type in the database.
	Label = "launch"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeKind holds the string denoting the kind edge name in mutations.
	EdgeKind = "kind"
	// EdgeApplicant holds the string denoting the applicant edge name in mutations.
	EdgeApplicant = "applicant"
	// Table holds the table name of the launch in the database.
	Table = "launches"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "launches"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_launches"
	// KindTable is the table that holds the kind relation/edge.
	KindTable = "launches"
	// KindInverseTable is the table name for the Kind entity.
	// It exists in this package in order to avoid circular dependency with the "kind" package.
	KindInverseTable = "kinds"
	// KindColumn is the table column denoting the kind relation/edge.
	KindColumn = "kind_launches"
	// ApplicantTable is the table that holds the applicant relation/edge.
	ApplicantTable = "launches"
	// ApplicantInverseTable is the table name for the Applicant entity.
	// It exists in this package in order to avoid circular dependency with the "applicant" package.
	ApplicantInverseTable = "applicants"
	// ApplicantColumn is the table column denoting the applicant relation/edge.
	ApplicantColumn = "applicant_launches"
)

// Columns holds all SQL columns for launch fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldReason,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "launches"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"applicant_launches",
	"kind_launches",
	"order_launches",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	ReasonValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusTodo is the default value of the Status enum.
const DefaultStatus = StatusTodo

// Status values.
const (
	StatusTodo      Status = "todo"
	StatusStarted   Status = "started"
	StatusCompleted Status = "completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusTodo, StatusStarted, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("launch: invalid enum value for status field: %q", s)
	}
}
