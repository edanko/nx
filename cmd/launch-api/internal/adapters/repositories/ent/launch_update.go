// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/repositories/ent/launch"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/repositories/ent/predicate"
)

// LaunchUpdate is the builder for updating Launch entities.
type LaunchUpdate struct {
	config
	hooks    []Hook
	mutation *LaunchMutation
}

// Where appends a list predicates to the LaunchUpdate builder.
func (lu *LaunchUpdate) Where(ps ...predicate.Launch) *LaunchUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetStatus sets the "status" field.
func (lu *LaunchUpdate) SetStatus(l launch.Status) *LaunchUpdate {
	lu.mutation.SetStatus(l)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *LaunchUpdate) SetNillableStatus(l *launch.Status) *LaunchUpdate {
	if l != nil {
		lu.SetStatus(*l)
	}
	return lu
}

// SetApplicant sets the "applicant" field.
func (lu *LaunchUpdate) SetApplicant(s string) *LaunchUpdate {
	lu.mutation.SetApplicant(s)
	return lu
}

// SetReason sets the "reason" field.
func (lu *LaunchUpdate) SetReason(s string) *LaunchUpdate {
	lu.mutation.SetReason(s)
	return lu
}

// SetDescription sets the "description" field.
func (lu *LaunchUpdate) SetDescription(s string) *LaunchUpdate {
	lu.mutation.SetDescription(s)
	return lu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lu *LaunchUpdate) SetNillableDescription(s *string) *LaunchUpdate {
	if s != nil {
		lu.SetDescription(*s)
	}
	return lu
}

// ClearDescription clears the value of the "description" field.
func (lu *LaunchUpdate) ClearDescription() *LaunchUpdate {
	lu.mutation.ClearDescription()
	return lu
}

// Mutation returns the LaunchMutation object of the builder.
func (lu *LaunchUpdate) Mutation() *LaunchMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LaunchUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaunchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LaunchUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LaunchUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LaunchUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LaunchUpdate) check() error {
	if v, ok := lu.mutation.Status(); ok {
		if err := launch.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Launch.status": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Applicant(); ok {
		if err := launch.ApplicantValidator(v); err != nil {
			return &ValidationError{Name: "applicant", err: fmt.Errorf(`ent: validator failed for field "Launch.applicant": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Reason(); ok {
		if err := launch.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "Launch.reason": %w`, err)}
		}
	}
	return nil
}

func (lu *LaunchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   launch.Table,
			Columns: launch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: launch.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: launch.FieldStatus,
		})
	}
	if value, ok := lu.mutation.Applicant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launch.FieldApplicant,
		})
	}
	if value, ok := lu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launch.FieldReason,
		})
	}
	if value, ok := lu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launch.FieldDescription,
		})
	}
	if lu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: launch.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{launch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LaunchUpdateOne is the builder for updating a single Launch entity.
type LaunchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LaunchMutation
}

// SetStatus sets the "status" field.
func (luo *LaunchUpdateOne) SetStatus(l launch.Status) *LaunchUpdateOne {
	luo.mutation.SetStatus(l)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *LaunchUpdateOne) SetNillableStatus(l *launch.Status) *LaunchUpdateOne {
	if l != nil {
		luo.SetStatus(*l)
	}
	return luo
}

// SetApplicant sets the "applicant" field.
func (luo *LaunchUpdateOne) SetApplicant(s string) *LaunchUpdateOne {
	luo.mutation.SetApplicant(s)
	return luo
}

// SetReason sets the "reason" field.
func (luo *LaunchUpdateOne) SetReason(s string) *LaunchUpdateOne {
	luo.mutation.SetReason(s)
	return luo
}

// SetDescription sets the "description" field.
func (luo *LaunchUpdateOne) SetDescription(s string) *LaunchUpdateOne {
	luo.mutation.SetDescription(s)
	return luo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (luo *LaunchUpdateOne) SetNillableDescription(s *string) *LaunchUpdateOne {
	if s != nil {
		luo.SetDescription(*s)
	}
	return luo
}

// ClearDescription clears the value of the "description" field.
func (luo *LaunchUpdateOne) ClearDescription() *LaunchUpdateOne {
	luo.mutation.ClearDescription()
	return luo
}

// Mutation returns the LaunchMutation object of the builder.
func (luo *LaunchUpdateOne) Mutation() *LaunchMutation {
	return luo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LaunchUpdateOne) Select(field string, fields ...string) *LaunchUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Launch entity.
func (luo *LaunchUpdateOne) Save(ctx context.Context) (*Launch, error) {
	var (
		err  error
		node *Launch
	)
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaunchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LaunchUpdateOne) SaveX(ctx context.Context) *Launch {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LaunchUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LaunchUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LaunchUpdateOne) check() error {
	if v, ok := luo.mutation.Status(); ok {
		if err := launch.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Launch.status": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Applicant(); ok {
		if err := launch.ApplicantValidator(v); err != nil {
			return &ValidationError{Name: "applicant", err: fmt.Errorf(`ent: validator failed for field "Launch.applicant": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Reason(); ok {
		if err := launch.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "Launch.reason": %w`, err)}
		}
	}
	return nil
}

func (luo *LaunchUpdateOne) sqlSave(ctx context.Context) (_node *Launch, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   launch.Table,
			Columns: launch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: launch.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Launch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, launch.FieldID)
		for _, f := range fields {
			if !launch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != launch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: launch.FieldStatus,
		})
	}
	if value, ok := luo.mutation.Applicant(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launch.FieldApplicant,
		})
	}
	if value, ok := luo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launch.FieldReason,
		})
	}
	if value, ok := luo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: launch.FieldDescription,
		})
	}
	if luo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: launch.FieldDescription,
		})
	}
	_node = &Launch{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{launch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
