// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/repositories/ent/kind"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/repositories/ent/launch"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/repositories/ent/order"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/repositories/ent/project"
	"github.com/edanko/nx/cmd/launch-api/internal/adapters/repositories/ent/schema"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	kindFields := schema.Kind{}.Fields()
	_ = kindFields
	// kindDescName is the schema descriptor for name field.
	kindDescName := kindFields[1].Descriptor()
	// kind.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kind.NameValidator = kindDescName.Validators[0].(func(string) error)
	// kindDescID is the schema descriptor for id field.
	kindDescID := kindFields[0].Descriptor()
	// kind.DefaultID holds the default value on creation for the id field.
	kind.DefaultID = kindDescID.Default.(func() uuid.UUID)
	launchFields := schema.Launch{}.Fields()
	_ = launchFields
	// launchDescApplicant is the schema descriptor for applicant field.
	launchDescApplicant := launchFields[2].Descriptor()
	// launch.ApplicantValidator is a validator for the "applicant" field. It is called by the builders before save.
	launch.ApplicantValidator = launchDescApplicant.Validators[0].(func(string) error)
	// launchDescReason is the schema descriptor for reason field.
	launchDescReason := launchFields[3].Descriptor()
	// launch.ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	launch.ReasonValidator = launchDescReason.Validators[0].(func(string) error)
	// launchDescID is the schema descriptor for id field.
	launchDescID := launchFields[0].Descriptor()
	// launch.DefaultID holds the default value on creation for the id field.
	launch.DefaultID = launchDescID.Default.(func() uuid.UUID)
	orderFields := schema.Order{}.Fields()
	_ = orderFields
	// orderDescName is the schema descriptor for name field.
	orderDescName := orderFields[1].Descriptor()
	// order.NameValidator is a validator for the "name" field. It is called by the builders before save.
	order.NameValidator = orderDescName.Validators[0].(func(string) error)
	// orderDescID is the schema descriptor for id field.
	orderDescID := orderFields[0].Descriptor()
	// order.DefaultID holds the default value on creation for the id field.
	order.DefaultID = orderDescID.Default.(func() uuid.UUID)
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescName is the schema descriptor for name field.
	projectDescName := projectFields[1].Descriptor()
	// project.NameValidator is a validator for the "name" field. It is called by the builders before save.
	project.NameValidator = projectDescName.Validators[0].(func(string) error)
	// projectDescID is the schema descriptor for id field.
	projectDescID := projectFields[0].Descriptor()
	// project.DefaultID holds the default value on creation for the id field.
	project.DefaultID = projectDescID.Default.(func() uuid.UUID)
}
