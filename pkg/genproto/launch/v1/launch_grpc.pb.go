// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: launch/v1/launch.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KindServiceClient is the client API for KindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KindServiceClient interface {
	CreateKind(ctx context.Context, in *CreateKindRequest, opts ...grpc.CallOption) (*CreateKindResponse, error)
	DeleteKind(ctx context.Context, in *DeleteKindRequest, opts ...grpc.CallOption) (*DeleteKindResponse, error)
	MakeKindPublished(ctx context.Context, in *MakeKindPublishedRequest, opts ...grpc.CallOption) (*MakeKindPublishedResponse, error)
	MakeKindDraft(ctx context.Context, in *MakeKindDraftRequest, opts ...grpc.CallOption) (*MakeKindDraftResponse, error)
	ChangeKindDescription(ctx context.Context, in *ChangeKindDescriptionRequest, opts ...grpc.CallOption) (*ChangeKindDescriptionResponse, error)
	ChangeKindName(ctx context.Context, in *ChangeKindNameRequest, opts ...grpc.CallOption) (*ChangeKindNameResponse, error)
	GetKind(ctx context.Context, in *GetKindRequest, opts ...grpc.CallOption) (*GetKindResponse, error)
	GetKindByName(ctx context.Context, in *GetKindByNameRequest, opts ...grpc.CallOption) (*GetKindByNameResponse, error)
	//  rpc CountKinds (CountKindsRequest) returns (CountKindsResponse);
	ListKinds(ctx context.Context, in *ListKindsRequest, opts ...grpc.CallOption) (*ListKindsResponse, error)
}

type kindServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKindServiceClient(cc grpc.ClientConnInterface) KindServiceClient {
	return &kindServiceClient{cc}
}

func (c *kindServiceClient) CreateKind(ctx context.Context, in *CreateKindRequest, opts ...grpc.CallOption) (*CreateKindResponse, error) {
	out := new(CreateKindResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/CreateKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) DeleteKind(ctx context.Context, in *DeleteKindRequest, opts ...grpc.CallOption) (*DeleteKindResponse, error) {
	out := new(DeleteKindResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/DeleteKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) MakeKindPublished(ctx context.Context, in *MakeKindPublishedRequest, opts ...grpc.CallOption) (*MakeKindPublishedResponse, error) {
	out := new(MakeKindPublishedResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/MakeKindPublished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) MakeKindDraft(ctx context.Context, in *MakeKindDraftRequest, opts ...grpc.CallOption) (*MakeKindDraftResponse, error) {
	out := new(MakeKindDraftResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/MakeKindDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) ChangeKindDescription(ctx context.Context, in *ChangeKindDescriptionRequest, opts ...grpc.CallOption) (*ChangeKindDescriptionResponse, error) {
	out := new(ChangeKindDescriptionResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/ChangeKindDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) ChangeKindName(ctx context.Context, in *ChangeKindNameRequest, opts ...grpc.CallOption) (*ChangeKindNameResponse, error) {
	out := new(ChangeKindNameResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/ChangeKindName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) GetKind(ctx context.Context, in *GetKindRequest, opts ...grpc.CallOption) (*GetKindResponse, error) {
	out := new(GetKindResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/GetKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) GetKindByName(ctx context.Context, in *GetKindByNameRequest, opts ...grpc.CallOption) (*GetKindByNameResponse, error) {
	out := new(GetKindByNameResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/GetKindByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kindServiceClient) ListKinds(ctx context.Context, in *ListKindsRequest, opts ...grpc.CallOption) (*ListKindsResponse, error) {
	out := new(ListKindsResponse)
	err := c.cc.Invoke(ctx, "/launch.v1.KindService/ListKinds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KindServiceServer is the server API for KindService service.
// All implementations should embed UnimplementedKindServiceServer
// for forward compatibility
type KindServiceServer interface {
	CreateKind(context.Context, *CreateKindRequest) (*CreateKindResponse, error)
	DeleteKind(context.Context, *DeleteKindRequest) (*DeleteKindResponse, error)
	MakeKindPublished(context.Context, *MakeKindPublishedRequest) (*MakeKindPublishedResponse, error)
	MakeKindDraft(context.Context, *MakeKindDraftRequest) (*MakeKindDraftResponse, error)
	ChangeKindDescription(context.Context, *ChangeKindDescriptionRequest) (*ChangeKindDescriptionResponse, error)
	ChangeKindName(context.Context, *ChangeKindNameRequest) (*ChangeKindNameResponse, error)
	GetKind(context.Context, *GetKindRequest) (*GetKindResponse, error)
	GetKindByName(context.Context, *GetKindByNameRequest) (*GetKindByNameResponse, error)
	//  rpc CountKinds (CountKindsRequest) returns (CountKindsResponse);
	ListKinds(context.Context, *ListKindsRequest) (*ListKindsResponse, error)
}

// UnimplementedKindServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKindServiceServer struct {
}

func (UnimplementedKindServiceServer) CreateKind(context.Context, *CreateKindRequest) (*CreateKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKind not implemented")
}
func (UnimplementedKindServiceServer) DeleteKind(context.Context, *DeleteKindRequest) (*DeleteKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKind not implemented")
}
func (UnimplementedKindServiceServer) MakeKindPublished(context.Context, *MakeKindPublishedRequest) (*MakeKindPublishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeKindPublished not implemented")
}
func (UnimplementedKindServiceServer) MakeKindDraft(context.Context, *MakeKindDraftRequest) (*MakeKindDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeKindDraft not implemented")
}
func (UnimplementedKindServiceServer) ChangeKindDescription(context.Context, *ChangeKindDescriptionRequest) (*ChangeKindDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeKindDescription not implemented")
}
func (UnimplementedKindServiceServer) ChangeKindName(context.Context, *ChangeKindNameRequest) (*ChangeKindNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeKindName not implemented")
}
func (UnimplementedKindServiceServer) GetKind(context.Context, *GetKindRequest) (*GetKindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKind not implemented")
}
func (UnimplementedKindServiceServer) GetKindByName(context.Context, *GetKindByNameRequest) (*GetKindByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKindByName not implemented")
}
func (UnimplementedKindServiceServer) ListKinds(context.Context, *ListKindsRequest) (*ListKindsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKinds not implemented")
}

// UnsafeKindServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KindServiceServer will
// result in compilation errors.
type UnsafeKindServiceServer interface {
	mustEmbedUnimplementedKindServiceServer()
}

func RegisterKindServiceServer(s grpc.ServiceRegistrar, srv KindServiceServer) {
	s.RegisterService(&KindService_ServiceDesc, srv)
}

func _KindService_CreateKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).CreateKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/CreateKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).CreateKind(ctx, req.(*CreateKindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_DeleteKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).DeleteKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/DeleteKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).DeleteKind(ctx, req.(*DeleteKindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_MakeKindPublished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeKindPublishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).MakeKindPublished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/MakeKindPublished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).MakeKindPublished(ctx, req.(*MakeKindPublishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_MakeKindDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeKindDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).MakeKindDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/MakeKindDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).MakeKindDraft(ctx, req.(*MakeKindDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_ChangeKindDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeKindDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).ChangeKindDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/ChangeKindDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).ChangeKindDescription(ctx, req.(*ChangeKindDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_ChangeKindName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeKindNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).ChangeKindName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/ChangeKindName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).ChangeKindName(ctx, req.(*ChangeKindNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_GetKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).GetKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/GetKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).GetKind(ctx, req.(*GetKindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_GetKindByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKindByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).GetKindByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/GetKindByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).GetKindByName(ctx, req.(*GetKindByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KindService_ListKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKindsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KindServiceServer).ListKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/launch.v1.KindService/ListKinds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KindServiceServer).ListKinds(ctx, req.(*ListKindsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KindService_ServiceDesc is the grpc.ServiceDesc for KindService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KindService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "launch.v1.KindService",
	HandlerType: (*KindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKind",
			Handler:    _KindService_CreateKind_Handler,
		},
		{
			MethodName: "DeleteKind",
			Handler:    _KindService_DeleteKind_Handler,
		},
		{
			MethodName: "MakeKindPublished",
			Handler:    _KindService_MakeKindPublished_Handler,
		},
		{
			MethodName: "MakeKindDraft",
			Handler:    _KindService_MakeKindDraft_Handler,
		},
		{
			MethodName: "ChangeKindDescription",
			Handler:    _KindService_ChangeKindDescription_Handler,
		},
		{
			MethodName: "ChangeKindName",
			Handler:    _KindService_ChangeKindName_Handler,
		},
		{
			MethodName: "GetKind",
			Handler:    _KindService_GetKind_Handler,
		},
		{
			MethodName: "GetKindByName",
			Handler:    _KindService_GetKindByName_Handler,
		},
		{
			MethodName: "ListKinds",
			Handler:    _KindService_ListKinds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "launch/v1/launch.proto",
}
